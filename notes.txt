------------------------------------------------------------------------------------------- Section 1 ---------------------------------------------------------------------------------------

-- Spring Boot Overview

• Spring in Nutshell
Very popular framework for building Java applications
Provides a large number of helper classes and annotations
The Problem is building a traditional Spring application is really HARD!!!

• Spring Boot Solution
Make it easier to get started with Spring development
Minimize the amount of manual configuration
Perform auto-configuration based on props files and JAR classpath
Help to resolve dependency conflicts (Maven or Gradle)
Provide an embedded HTTP server so you can get started quickly
Tomcat, Jetty, Undertow, ...

• Spring Boot and Spring
Spring Boot uses Spring behind the scenes
Spring Boot simply makes it easier to use Spring


-- Spring Initializer Demo

• Spring Initializer 
Quickly create a starter Spring project by going to http://start.spring.io
Select your dependencies
Creates a Maven/Gradle project
Import the project into your IDE
Eclipse, IntelliJ, NetBeans etc ...

• Quick word on Maven
When building your Java project, you may need additional JAR files
For example: Spring, Hibernate, Commons Logging, JSON etc...
One approach is to download the JAR files from each project web site
Manually add the JAR files to your build path / classpath

• Maven Solution
Tell Maven, the projects you are working with (dependencies) like Spring, Hibernate etc ....
Maven will go out and download the JAR files for those projects for you
And Maven will make those JAR files available during compile/run
Think of Maven as your friendly helper / personal shopper

• Development Process
1. Configure our project at Spring Initializr website http://start.spring.io
2. Download the zip file
3. Unzip the file
4. Import the project into our IDE
5. Give sometime to IDE to download all Maven Dependencies
6. Run the main java file
7. Simple go to localhost:8080 which is intialized and started by Tomcat.


-- Create a REST Controller

• Example for how to create a simple REST Controller
  Project: 01-spring-boot-demo

-- Spring Framework Overview - Part 1

• Goals of Spring
Lightweight development with Java POJOs (Plain-Old-Java-Objects)
Dependency injection to promote loose coupling
Minimize boilerplate Java code


-- What is Maven?

Maven is a Project Management tool. Most popular use of Maven is for build management and dependencies. When building your Java project, 
you may need additional JAR files for example: Spring, Hibernate, Commons Logging, JSON etc. One approach is to download the JAR files from each project web site.
Manually add the JAR files to your build path / classpath. Another approch is tell Maven, the projects you are working with (dependencies) like Spring, Hibernate etc.
Maven will go out and download the JAR files for those projects for you. And Maven will make those JAR files available during compile/run. Think of Maven as your friendly 
helper / personal shopper. 

• Handling JAR Dependencies
When Maven retrieves a project dependency. It will also download supporting dependencies like Spring depends on commons-logging.
Maven will handle this for us automagically

• Building and Running
When you build and run your app ...
Maven will handle class / build path for you
Based on config file, Maven will add JAR files accordingly


-- Maven Project Structure

Normally when you join a new project
Each development team dreams up their own directory structure
Not ideal for new comers and not standardized
Maven solves this problem by providing a standard directory structure

• Standard Directory Structure
Directory			Description
src/mainijava			Your Java source code
src/main/resources		Properties / config files used by your app
src/main/webapp			JSP files and web config files other web assets (images, css, js, etc)
src/test			Unit testing code and properties
target				Destination directory for compiled code. Automatically created by Maven


-- Maven Key Concepts

• POM File - pom.xml
POM Stands for Project Object Model File
It is the configuration file for our project
It is always located in the root for our project
THe pom.xml file consist of three things: project meta data, dependencies and plug-ins.
project meta data: Project name, version and Output file type: JAR, WAR, ...
dependencies:      List of projects we depend on Spring, Hibernate, etc
plug ins:	   Additional custom tasks to run: generate JUnit test reports etc


• Project Coordinates
Project Coordinates uniquely identify a project
Similar to GPS coordinates for your house: latitude / longitude
Precise information for finding your house (city, street, house #)

Example:
<groupId>com.springboot.demo</groupId>
<artifactId>myFirstApp</artifactId>
<version>0.0.1-SNAPSHOT</version>


-- Exploring Spring Boot Project Files - Part 1

• Maven Standard Directory Structure
Directory			Description
src/mainijava			Your Java source code
src/main/resources		Properties / config files used by your app
src/test/java			Unit testing source code

• Maven Wrapper files
mvnw allows you to run a Maven project. There is no need to have Maven installed or present on your path. If correct version of Maven is NOT found on your computer
it automatically downloads correct version and runs Maven.
There are two files that are already provided: 
mvnw.cmd for MS Windows	to run commands like	-->	mvnw clean comiple test
mvnw.sh for Linux/Mac	to run commands like	-->	./mvnw clean comiple test

• Maven POM file
pom.xml includes info that you entered at Spring Initializr website. 
It includes: Spring Boot Starters (A collection of Maven dependencies)
             Spring Boot Maven plugin which is used to To package executable jar or war archive. And it can also easily run the app(./mvnw package) (-/mvnw spring-boot:run)

• Java Source Code
The Java Source Code includes:
Main Spring Boot application class
RestController that we created in an earlier video


-- Exploring Spring Boot Project Files - Part 2

• Application Properties
By default, Spring Boot will load properties from: application.properties.
The file 'application.properties' happens to be empty at the beginning.
We can add spring boot properties:	
server.port=8585
We can also add our own custom properties:  
coach.name=Mickey Mouse
team.name=The Mouse Crew

Now to make use of all those custom properties which we created into our 'application.properties', we can do with below code
@RestController
public class FunRestController {

 @Value ("${coach.name}")
 private String coachName;

 @value ("${team.name}")
 private String teamName;
 
 ...
} 

• Static Content
By default, Spring Boot will load static resources from "/static" directory
Examples of static resources are HTML files, CSS, JavaScript, images etc.


• Unit Tests
It includes Spring Boot unit test class where we can add unit tests to the file.


-- Spring Boot Starters

• What is Spring Boot Starters?
A curated list of Maven dependencies
A collection of dependencies grouped together
Tested and verified by the Spring Development team
Makes it much easier for the developer to get started with Spring
Reduces the amount of Maven configuration

Spring Boot provides 'spring-boot-started-web' which is a collection of dependencies.
It contain dependencies such as spring-web, spring-webmvc, hibernate-validator, json, tomcat etc.

There are 30 plus Spring Boot Starters from the Spring Development team.
Name				Description
spring-boot-starter-web 	Building web apps, includes validation, REST. Uses Tomcat as default embedded server
spring-boot-starter-securty	Adding spring security support
spring-boot-starter-data-jpa	Spring database support with JPA and Hibernate
...				...


-- Spring Boot Parents for Starters

Spring Boot provides a "Starter Parent"
This is a special starter that provides Maven defaults
<parent>
 <groupId>org.springframework.boot</groupId>
 <artifactId>spring-boot-starter-parent</artifactId>
 <version>3.@.Q-RC1</version>
 <relativePath/> <!/-- lookup parent from repository -->
</parent>


• Benefits of the Spring Boot Starter Parent
Default Maven configuration: Java version, UTF-encoding etc
Dependency management
 Use version on parent only
 spring-boot-starter-* dependencies inherit version from parent
Default configuration of Spring Boot plugin


-- Spring Boot Dev Tools - Overview

Automatically restarts your application when code is updated
Simply add the dependency to your POM file
No need to write additional code :-)
For IntelliJ, need to set additional configurations.

When we add the dependency to our POM file. It will automatically restarts your application when code is updated
<dependency>
<groupId>org.springframework .boot</groupId>
<artifactId>spring-boot-devtools</artifactId>
</dependency> 

• Development Process
Steps:
1. Apply IntelliJ configurations
2. Edit pom.xml and add spring-boot-devtools
3. Add new REST endpoint to our app
4. Verify the app is automatically reloaded


-- Spring Boot Dev Tools - Coding
• Example for how to set devtools
  Project: 02-dev-tools-demo 


-- Spring Boot Actuator - Overview

Exposes endpoints to monitor and manage your application
You easily get DevOps functionality out-of-the-box
Simply add the dependency to your POM file
REST endpoints are automatically added to your application
No need to write additional code!
You get new REST endpoints for FREE!

Once we add the dependency to your POM file. It enables Spring Boot Actuator.
<dependency>
    <groupId>org.springframework .boot</groupId>
    <artifactId>spring-boot-starter-actuator</artifactId>
</dependency>

Automatically exposes endpoints for metrics out-of-the-box
Endpoints are prefixed with: /actuator
Name 		Description
/health 	Health information about your application

• Health Point
/health checks the status of your application
Normally used by monitoring apps to see if your app is up or down

• Info Point
By default, It is empty
The /info endpoint can provide information about your application
To expose /info: we need to make below changes
File: src/main/resources/application.properties
management.endpoints.web.exposure.include=health,info
management.info.env.enabled=true

we also need to update application.properties with your app info
File: src/main/resources/application.properties
info.app.name=My Super Cool App
info.app.description=A crazy and fun app, yoohoo!
info.app.version=1.0.0

Properties starting with "info." will be used by /info

• Other Spring Boot Actuator Endpoints
There are 10+ Spring Boot Actuator endpoints:
Name 			Description
/auditevents 		Audit events for your application
/beans 			List of all beans registered in the Spring application context
/mappings 		List of all @RequestMapping paths


• How to make use of all Spring Boot Actuator Endpoints
By default, only /health is exposed
To expose all actuator endpoints over HTTP
File: src/main/resources/application.properties
# Use wildcard "*" to expose all endpoints
# Can also expose individual endpoints with a comma-delimited list
management.endpoints.web.exposure.include=*		

Above one line of code exposes all endpoints


• Get a list of beans
Access http://localhost:8080/actuator/beans

• Development Process
Steps:
1. Edit pom.xml and add spring-boot-starter-acuator
2. View actuator endpoints for: /health
3. Edit application .properties to customize /info


-- Spring Boot Actuator - Accessing Endpoints - Part 1
• Example for how to set actuator
  Project: 03-actuator-demo


-- Spring Boot Actuator - Securing Endpoints - Overview

• What about Security?
We may NOT want to expose all of this information
Add Spring Security to project and endpoints are secured. Below code enables Spring Security
<dependency>
    <groupid>org.springframework .boot</groupId>
    <artifactId>spring-boot-starter-security</artifactid>
</dependency>

• Secured Endpoints
Once we put above dependency, and than if we access: /actuator/beans
Spring Security will prompt for login where the 
user name: user 
Password: it will automatically generate into our terminal

There is also one more way to set user name and password:
We can override default user name and generated password
File: src/main/resources/application.properties
spring.security.user.name=scott
spring.security.user.password=tiger

• Customizing Spring Security
We can customize Spring Security for Spring Boot Actuator
Use a database for roles, encrypted passwords etc ...

• Exclude endpoints 
We can also exclude endpoints.
To exclude /health and /info
File: src/main/resources/application.properties
# Exclude individual endpoints with a comma-delimited list
management.endpoints.web.exposure.exclude=health, info

• Development Process
1. Edit pom.xml and add spring-boot-starter-security
2. Verify security on actuator endpoints for: /beans etc
3. Disable endpoints for /health and /info


-- Spring Boot Actuator - Securing Endpoints - Coding
• Example for how to secure actuator endpoints
  Project: 04-actuator-security-demo


-- Run Spring Boot apps from the Command Line - Overview

• Running from the Command-Line
When running from the command-line. There is no need to have IDE open/running
Since we using Spring Boot, the server is embedded in our JAR file. There is no need to have separate server installed / running
Because Spring Boot apps are self-contained.

Two options for running the app from the command line:
Option 1: Use 				-->	java -jar appName.jar(if you already have the jar file of your application)
Option 2: Use Spring Boot Maven plugin	-->	1. mvnw package(this will create a jar file of our application)		2. mvnw spring-boot: run
Remember the JAR file gets created in the 'target' subdirectory.

•  Development Process
1. Exit the IDE
2. Package the app using mvnw package
3. Run app using java -jar
4. Run app using Spring Boot Maven plugin, mvnw spring-boot: run


-- Run Spring Boot apps from the Command Line - Demo
For This Example, I simply did below steps:
1. Open my Bash Terminal into the application folder directly which is '05-command-line-demo'
2. On the Git Bash Terminal, I run: ./mvnw package
3. Now the above command creates a JAR file of our application into the 'target' folder.
4. So I run: cd target to go inside the target folder.
5. Now to run our application, I run the command: ava -jar  myFirstApp-0.0.1-SNAPSHOT.jar(which is the actual name of our application)
 

-- Injecting Custom Application Properties - Overview

• Application Properties File
By default, Spring Boot reads information from a standard properties file which is located at: src/main/resources/application. properties
We can define ANY custom properties in this Standard Spring Boot file.
Once we write custom properties, Spring Boot app can access those properties using @Value.
And there is no additional coding or configuration required.

• Development Process
Steps:
1. Define custom properties in application.properties
We can give ANY custom property names and as many as we want.
File: src/main/resources/application.properties:
# Define custom properties
coach.name=Mickey Mouse
team.name=The Mouse Club

2. Inject properties into Spring Boot application using @Value
@RestController
public class FunRestController {

// inject properties for: coach.name and team.name
@Value ("${coach.name}")
private String coachName;

@Value ("${team.name}")
private String teamName;

...
}

-- Injecting Custom Application Properties - Coding
• Example for inject custom application properties into a java file
  Project: 06-properties-demo


-- Configuring the Spring Boot Server - Overview
Spring Boot can be configured in the application. properties file
Server port, context path, actuator, security etc.
Spring Boot has over 1000 properties.
The properties are roughly grouped into the following categories:
Core, Web, Security, Data, Actuator, Integration, DevTools, Testing


• Core Properties
File: src/main/resources/application.properties
# Log levels severity mapping
# Set logging levels based on package names
logging.level.org.springframework=DEBUG
logging.level.org.hibernate=TRACE
logging.level.com. luv2code=INFO
# Log file name
logging.file=my-crazy-stuff.log

• Web Properties
File: src/main/resources/application.properties
# HTTP server port, The default server local host is 8080
server.port=7070
# Context path of the application, The default context path is '/'
server.servlet.context-path=/my-silly-app
# Default HTTP session time out, The default session time out is 30min.
server.servlet.session.timeout=15m

• Actuator Properties
File: src/main/resources/application.properties
# Endpoints to include by name or wildcard
management.endpoints.web.exposure.include=*
# Endpoints to exclude by name or wildcard
management.endpoints.web.exposure.exclude=beans,mapping
# Base path for actuator endpoints
Management.endpoints.web.base-path=/actuator

• Security Properties
File: src/main/resources/application.properties
# Change default user name
spring.security.user.name=admin
# Chaneg password for default user
spring.security.user.password=topsecret

• Data Properties
File: srcimain/resources/application. properties
# JDBC URL of the database
spring.datasource.url=jdbc:mysql: //localhost :3306/ecommerce
# Login username of the database
spring.datasource.username=scott
# Login password of the database
spring.datasource.password=tiger

• Development Process
Steps:
1. Configure the server port
2. Configure the application context path



------------------------------------------------------------------------------------------- Section 2 ---------------------------------------------------------------------------------------

-- What is Inversion of Control?
Inversion of Control (IoC) is a design pattern in object-oriented programming where the control of object creation 
and management is inverted from the application code to an external framework.

• Spring Container
Primary functions: 
 Create and manage objects (Inversion of Control)
 Inject object dependencies (Dependency Injection)

• Configuring Spring Container: 3 ways
XML configuration file (legacy)
Java Annotations (modern) 
Java Source Code (modern)


-- Defining Dependency Injection - Overview - Part 1

• Dependency Injection
The dependency inversion principle.
The client delegates to another object the responsibility of providing its dependencies.

• Injection Types
There are multiple types of injection with Spring
The two recommended types of injection: 
Constructor Injection
 Use this when you have required dependencies
 Generally recommended by the spring.io development team as first choice
Setter Injection
 Use this when you have optional dependencies
 If dependency is not provided, your app can provide reasonable default logic

• What is Spring AutoWiring
For dependency injection, Spring can use autowiring
Spring will look for a class that matches by type: class or interface
Spring will inject it automatically ... hence it is autowired

• @Component annotation
@Component marks the class as a Spring Bean
A Spring Bean is just a regular Java class that is managed by Spring
@Component also makes the bean available for dependency injection


-- Defining Dependency Injection - Overview - Part 1
• Example Application
Web Browser	---- /dailyWorkout ---->		DemoController		---- getDailyWorkout() ---->		Coach
Web Browser	---- Practice Fast Bowling ---->	DemoController		---- "Practice Fast Bowling" ---->	Coach

• Development Process - Constructor Injection
1. Define the dependency interface and class
2. Create Demo REST Controller
3. Create a constructor in your class for injections
4. Add @GetMapping for /dailyworkout


-- Constructor Injection - Coding - Part 1
Generating A Maven Project through https://start.spring.io/


-- Constructor Injection - Coding - Part 2
• Example for how to use constructor injection 
  Project: 01-constructor-injection


--  Constructor Injection - Behind the Scenes

• How Spring Process our application
// All bellow code is happening behind the scenes:
Coach theCoach = new CricketCoach();	
DemoController demoController = new DemoController(theCoach); 		<-- Constructor Injection


--  Component Scanning - Overview

• Scanning for Component Classes
Spring will scan your Java classes for special annotations
 @Component, etc...
It will automatically register the beans in the Spring container
In the project: 01-constructor-injection, 
we have a Main Spring Boot Class: SpringcoredemoApplicaiton.java which is is created by Spring Initializer: https://start.spring.io/
Now this file imports: org.springframework.boot.autoconfigure.SpringBootApplication
because of which we were able to put the annotation: @SpringBootApplication
Now this annotation enables: Auto configuration, Component scanning, Additional configuration
Behind the Scenes, The @SpringBootApplication composed of @EnableAutoConfiguration, @ComponentScan and @Configuration annotations.

• Annotations
@SpringBootApplication is composed of the following annotations:

Annotation 			Description
@EnableAutoConfiguration 	Enables Spring Boot's auto-configuration support
@ComponentScan			Enables component scanning of current package. Also recursively scans sub-packages
@Configuration			Able to register extra beans with @Bean or import other configuration classes

• About SpringApplication.run
Here the ' SpringApplication.run ' bootstraps our spring boot application.
And in ' SpringApplication.run(SpringcoredemoApplication.class, args); ', we have to write the actual name of our class to
give a reference.
Behind the Scenes, This both above lines will create the application context, registers all beans and starts the embedded serve.

• More on Component Scanning
By default, Spring Boot starts component scanning
 From same package as your main Spring Boot application
 Also scans sub-packages recursively
This implicitly defines a base search package
 Allows you to leverage default component scanning
 No need to explicitly reference the base package name

• Explicitly list base packages to scan
@springBootApplication(
scanBasePackages={"com.practice.springcoredemo",
                  "com.practice.util",
                  “org.acme.cart",
                  "edu.cmu.srs"})
public class SpringcoredemoApplication {
    ...	
}


-- Component Scanning - Coding - Part 1
-- Component Scanning - Coding - Part 2
• Example for how to list baseScanPackages in Main Application and let spring boot component scan outsider packages
  Project: 02-component-scanning


-- Setter Injection - Overview

• Autowiring Example
First we will inject a Coach implementation. Than spring will scan for @Components and finds if there is any class that implements the Coach interface.
If yes there is one, it will inject it. For example: CricketCoach.

• Injection Types - Which one to use?
Constructor Injection
 Use this when you have required dependencies
 Generally recommended by the spring.io development team as first choice
Setter Injection
 Use this when you have optional dependencies
 If dependency is not provided, your app can provide reasonable default logic

• Development Process - Setter Injection
1. Create setter method(s) in your class for injections
2. Configure the dependency injection with @Autowired Annotation

• Example for how to use setter injection
  Project: 03-setter-injection


-- Field Injection

• Spring Injection Types
Recommended by the spring.io development team
 Constructor Injection: required dependencies
 Setter Injection: optional dependencies
Not recommended by the spring.io development team
Field Injection

• Why Field Injection is no longer in use?
In the early days, field injection was popular on Spring projects
 In recent years, it has fallen out of favor
In general, it makes the code harder to unit test
As a result, the spring.io team does not recommend field injection
 However, you will still see it being used on legacy projects

• How it works?
Field Injection is the idea of injecting in dependencies by setting the values on your class directly, even on private fields
and this is accomplished by Java Reflection.

Steps:
1. Configure the dependency injection with Autowired Annotation
File: DemoController.java
import org.springframework.beans.factory.annotation.Autowired;
@RestController
public class DemoController {
    @Autowired
    private Coach myCoach; 		// we have autowired the field here so that is why it is Field injection
    // no need for constructors or setters

   @GetMapping(" /dailyworkout")
   public String getDailyWorkout() {
       return myCoach.getDailyWorkout();
   } 
}


-- Qualifiers - Overview

• Autowiring Example
First we will inject a Coach implementation. Than spring will scan for @Components and finds if there is any class that implements the Coach interface.
If yes, but this time there are multiple of them, So spring will make use of Qualifiers to find one class that we wanted it to get injected.

• How it Works?
In our project, we have an interface 'Coach' and only one class 'CricketCoach' that implements 'Coach'. So it easy straight forward for spring to inject 
dependency if there is only one class that is implementing 'Coach'. 
Now consider that we have multiple classes that is implementing 'Coach' interface, Now how spring will know which class to choose.

If we have classes such as 'CricketCoach', 'BaseballCoach', 'TrackCoach' and 'TenisCoach', The Spring will show us below error when we run it:
 Parameter 0 of constructor in com.luv2code.springcoredemo.rest.DemoController
 required a single bean, but 4 were found:
 baseballCoach
 cricketCoach
 tennisCoach
 trackCoach

Now the solution here is to make use of ' @Qualifier("className") ' in the autowired constructor or setter function.
// File: DemoController.java (Constructor Example)
@Autowired
public DemoController(@Qualifier("cricketCoach") Coach theCoach) {// here we are telling spring tha make use of 'cricketCoach' class as the injection. While implementing 'Coach' interface. 
myCoach = theCoach;
}

// File: DemoController.java (Setter Example)
@Autowired
public void setMyCoach(@Qualifier("cricketCoach") Coach theCoach) {// here we are telling spring tha make use of 'cricketCoach' class as the injection. While implementing 'Coach' interface. 
myCoach = theCoach;
}


-- Qualifiers - Coding - Part 1
-- Qualifiers - Coding - Part 2

• Example for how to use Qualifier Annotaion
  Project: 04-qualifiers


-- Primary - Overview
 
• Resolving issue with Multiple Coach implementations
In the case of multiple Coach implementations. We resolved it using @Qualifier that is by specifing a coach by name
However there is also an Alternate solution.

• How it works?
Instead of putting the 'Qualifier' Annotation and specifing which class should be used.
We can just put the 'Primary' Annotation right above the Class which we wanted to be get used.
Example:
// File: TrackCoach.java
import org.springframework.context .annotation.Primary;
import org.springframework.stereotype.Component;
@Component
@Primary						// with this annotation, the spring will know that it has to use this class as an injection.
public class TrackCoach implements Coach {
    @override
    public String getDailyWorkout() {
    return "Run a hard 5k!";
    }
}

• If 'Primary' Annotation used more than once
The Primary Annotation can only be used once in case of Multiple Impletation.
If we try to mark multiple classes with Primary Annotation, we will get below error:
Unsatisfied dependency expressed through constructor parameter 0:
No qualifying bean of type 'com.luv2code.springcoredemo.common.Coach' available:
more than one ‘primary' bean found among candidates:
[baseballCoach, cricketCoach, tennisCoach, trackCoach]

• Mixing @Primary and @Qualifier
Firstly we can use both annotations at same time. But you might have to be careful which to use when.
Secondly, @Qualifier has higher priority that is if we used @Qualifier for 'CricketCoach' and @Primary for 'TrackCoach', Than Spring will go and use 'CricketCoach'.

• Which one: @Primary or @Qualifier?
@Primary leaves it up to the implementation classes
 Could have the issue of multiple @Primary classes leading to an error
@Qualifier allows to you be very specific on which bean you want
In general, I recommend using @Qualifier
 It is more specific.
 It has higher priority.


-- Primary - Coding
• Example for how to use Primary Annotaion
  Project: 05-primary


-- Lazy Initialization - Overview

• Initialization
By default, when our application starts, all beans are initialized so it will scan for all components such as @Component and those components will instialized. 
So spring will create an instance of each and make them available.

Now to see that all beans have been initialized on the start of our application, we can put a println statement which prints each class's name:
// File: CricketCoach.java
public CricketCoach() {
    System.out.println("In constructor: " + getClass().getSimpleName());
}

// File: BaseballCoach.java
public BaseballCoach() {
    System.out.println("In constructor: " + getClass().getSimpleName());
}

// File: TennisCoach.java
public TennisCoach() {
    System.out.println("In constructor: " + getClass().getSimpleName());
}

// File: TrackCoach.java
public TrackCoach() {
    System.out.println("In constructor: " + getClass().getSimpleName());
} 

Now once we run the application, all the beans that is our classes which spring converts them into beans once we put the '@Component' will get initialized 
and the terminal will show below lines:
In constructor: BaseballCoach
In constructor: CricketCoach
In constructor: TennisCoach
In constructor: TrackCoach

Now there is usually not need of all beans to get intialized at time of application start.
Now to resolve that, we can make use of 'Lazy Initialization' Annotation.

• Lazy Initialization
Instead of creating all beans up front, we can specify lazy initialization
A bean will only be initialized in the following cases:
 It is needed for dependency injection
 Or itis explicitly requested
Add the @Lazy annotation to a given class
Example:
// File: TrackCoach
import org.springframework.context annotation.Lazy;
import org.springframework.stereotype.Component;
@Component
@Lazy						// this will implement Lazy Initialization to this class.
public class TrackCoach implements Coach {
    public TrackCoach() {
        System.out.println("In constructor: " + getClass().getSimpleName());
    }
}


• Lazy Iniitialization - Global configuration
We can also use this Annotation on all our beans at one time which is with the help of 'application.properties' file.
File: application.properities
spring.main.lazy-initialization=true

Now with above line of declaration, All beans are lazy, no beans will get created untill needed, including our DemoController.
If we consider our Coach project, So once we access our REST endpoint of '/dailyworkout', then spring will determine the dependencies
for the DemoController. And for the dependency resolution, spring will create instance of 'CricketCoach' first then create instance
of 'DemoController' and injects the 'CricketCoach'.
 
• Advantages of using Lazy Initialization
Only create objects as needed
May help with faster startup time if you have large number of components

• Disadvantages
If you have web related components like @RestController, not created until requested
May not discover configuration issues until too late
Need to make sure you have enough memory for all beans once created


-- Lazy Initialization - Coding - Part 1
-- Lazy Initialization - Coding - Part 2
• Example for how to use Lazy Initialization Annotaion
  Project: 05-lazy-initialization


-- Bean Scopes - Overview
Scope refers to the lifecycle of a bean such as:  How long does the bean live? How many instances are created? How is the bean shared?

• Singleton Scope
Now the default scope is singleton.
Singleton means that by default, the Spring Container creates only one instance of the bean. It is catched in memory. And all dependency injections
for the bean will reference the same bean.(Single item that is created in memory and shared amongst different other items.) 
Singleton Example:
@RestController
public class DemoController {
    // Here we have created two references and both will point at the same instance.
    private Coach myCoach;			
    private Coach anotherCoach;

    @Autowired
    public DemoController(
                  @Qualifier("cricketCoach") Coach theCoach,			// first reference points at the 'CricketCoach' instance.
                  @Qualifier("cricketCoach") Coach theAnotherCoach) {		// Second reference also points at the same above 'CricketCoach' instance.
        myCoach = theCoach;
        anotherCoach = theAnotherCoach;
    }
}

• Explicitly Specify Bean Scope
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation. Scope;
import org.springframework.stereotype.Component;

@Component
@Scope (ConfigurableBeanFactory.SCOPE_SINGLETON)				// this is how we can explicitly specify bean scope
public class CricketCoach implements Coach {
    ...
}

• Additional Spring Bean Scopes
Scope		Description
singleton	Create a single shared instance of the bean. Default scope.
prototype	Creates a new bean instance for each container request.
request		Scoped to an HTTP web request. Only used for web apps.
session		Scoped to an HTTP web session. Only used for web apps.
global-session	Scoped to a global HTTP web session. Only used for web apps.


• Prototype Scope Example: a new object instance is created for each injection
// File: CricketCoach.java
import org.springframework.beans.factory.config.ConfigurableBeanFactory;
import org.springframework.context.annotation. Scope;
import org.springframework.stereotype.Component;

@Component
@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)		// we have to specify the scope here in 'CricketCoach' class.
public class CricketCoach implements Coach {
    ...
}

// File: DemoController.java
@RestController
public class DemoController {
    // Here we have created two references and both will point at the two different instances.
    private Coach myCoach;
    private Coach anotherCoach;

    @Autowired
    public DemoController(
		  // Here we have done two injections of same class 'CricketCoach', as we have specified 'Prototype' scope, a new object instance is created for each injection
                  @Qualifier("cricketCoach") Coach theCoach,			// first reference will point at one instance of 'CricketCoach'
                  @Qualifier("cricketCoach") Coach theAnotherCoach) {	        // second reference will point at second instance of 'CricketCoach'
        myCoach = theCoach;
        anotherCoach = theAnotherCoach;
    }
}


-- Bean Lifecyle Methods - Overview 

• Bean Lifecycle
Spring Container Started --> beans are instantiated --> dependencies are injected --> internal spring processing occurs --> excutes our custom initialization method
After method gets execute --> Bean is ready to use --> once we use it --> Spring Container gets shutdown --> executes our custom destroy method.																	

• Bean Lifecycle Methods / Hooks
You can add custom code during bean initialization
 Calling custom business logic methods
 Setting up handles to resources (db, sockets, file etc)
You can add custom code during bean destruction
 Calling custom business logic method
 Clean up handles to resources (db, sockets, files etc)

• Initialization of Method configuration
@Component
public class CricketCoach implements Coach {
    public CricketCoach() {
        System.out.println("In constructor: “ + getClass().getSimpleName());
    }

    @PostConstruct	// With the help of this annotation, we have added our own custom initialization code, once the bean has been constructed.
    public void doMyStartupStuff() {
    System.out.println("In doMyStartupStuff(): " + getClass().getSimpleName());
    }

    @PreDestroy		// With the help of this annotation, we have added our own custom cleanup code, which will run just before the bean gets destructed.
    public void doMyCleanupStuff() {
    System.out.println("In doMyStartupStuff(): " + getClass().getSimpleName());
    }
}
 
• Development Process
1. Define your methods for init and destroy
2. Add annotations: @PostConstruct and @PreDestroy


-- Special Note about Prototype Scope - Destroy Lifecycle Method and Lazy Initializ
• Prototype Beans and Destroy Lifecycle
There is a subtle point you need to be aware of with "prototype" scoped beans.
For "prototype" scoped beans, Spring does not call the destroy method. Gasp!

In contrast to the other scopes, Spring does not manage the complete lifecycle of a prototype bean: the container instantiates, configures, 
and otherwise assembles a prototype object, and hands it to the client, with no further record of that prototype instance.
Thus, although initialization lifecycle callback methods are called on all objects regardless of scope, in the case of prototypes, configured 
destruction lifecycle callbacks are not called. The client code must clean up prototype-scoped objects and release expensive resources that 
the prototype bean(s) are holding.

• Prototype Beans and Lazy Initialization
Prototype beans are lazy by default. There is no need to use the @Lazy annotation for prototype scopes beans.


-- Java Config Bean - Overview

In this is program, we will create a new Class 'SwimCoach' and we will not use any special annotations like '@Component' to configure it as bean.
Instead we will configure it using @Bean annotation.

• Development Process
1. Create @Configuration class
package com. luv2code.springcoredemo.config;
import org.springframework.context.annotation.Configuration;
@configuration								// With this annotation, we are declaring 'SportConfig' a configuration class for configuring spring.
public class SportConfig {
    ...
}

2. Define @Bean method to configure the bean
package com. luv2code.springcoredemo.config;
import com. luv2code.springcoredemo.common.Coach;
import com. luv2code.springcoredemo.common.SwimCoach;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
@Configuration
public class SportConfig {
    @Bean
    public Coach swimCoach() {		// The bean id defaults to the method name, So this bean will have a bean id of SwimCoach.
        return new SwimCoach();		// returing a new instance of SwimCoach. Here we are manually constructing the object and returning to given caller. 
    }
}

3. Inject the bean into our controller
import com.practice.springcoredemo.common.Coach;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;
@RestController
public class DemoController {
    private Coach myCoach;
    @autowired
    public DemoController(@Qualifier("swimCoach") Coach theCoach) {			// here we made use of the bean id 'swimCoach' to inject it.
        System.out.println("In constructor: " + getClass().getSimpleName());
        myCoach = theCoach;
    }
}


• Use case for @Bean
Make an existing third-party class available to Spring framework
You may not have access to the source code of third-party class
However, you would like to use the third-party class as a Spring bean

• Real-World Project Example
Our project used Amazon Web Service (AWS) to store documents
 Amazon Simple Storage Service (Amazon S3)
 Amazon S3 is a cloud-based storage system
 can store PDF documents, images etc
We wanted to use the AWS S3 client as a Spring bean in our app
The AWS S3 client code is part of AWS SDK
 We can’t modify the AWS SDK source code
 We can’t just add @Component
However, we can configure it as a Spring bean using @Bean


------------------------------------------------------------------------------------------- Section 3 ---------------------------------------------------------------------------------------

-- Hibernate / JPA Overview
• What is Hibernate?
A framework for persisting / saving Java objects in a database
Our Java	-->	Hibernate	-->	Database
App		<-- 			<--

• Benefits of Using Hibernate
Hibernate handles all of the low-level SQL
Minimizes the amount of JDBC code you have to develop
Hibernate provides the Object-to-Relational Mapping (ORM)

• What is Object-To-Relational Mapping (ORM)
The developer defines mapping between Java class and database table

Example:
Java Class		-->	HIBERNATE		-->	Database Table
Student			<--	(Middleware)		<--	Student
id: int								id INT
firstName: String						first_name VARCHAR(45)
lastName: String						last_name VARCHAR(45)
email: String							email VARCHAR(45)

As you can see in above example, On the far left side we have our Java Class 'Student'. On the far right side, we have our Database Table 'Student'.
Now the Hibernate works as a Middleware, It will set a one-to-one mapping between the fields of our java class and the actual columns in database.
We can set up this mapping via configuration file via XML or through Java Annotations.

• What is JPA?
JPA stands for Jakarta Persistence API(JPA), previously known as Java Persistence API.
It is a standard API for Object-to-Relational-Mapping (ORM)
It is only a specification which defines a set of interfaces and requires an implementation to be useable.

• JPA - Vendor Implementations
One of the most popular implementations for JPA is 'Hibernate'.
Just like Java Coding, It take those interfaces and it provides an implementation of those given interfaces.

• Benefits of Using JPA
By having a standard API, you are not locked to vendor's implementation
Maintain portable, flexible code by coding to JPA spec (interfaces)
Can theoretically switch vendor implementations
 For example, if Vendor ABC stops supporting their product
 You could switch to Vendor XYZ without vendor lock in

• Example for JPA - Vendor Implementations
Suppose, we have an application 'MyBizApp' and we are writing our DAO code based on the JPA spec.
Now in one version of our project, we are using 'EclipseLink' as our vendor implementation, and in second version of our project, we want to 
change our vendor implementation to 'Hibernate'. Now this swapping of JPA Vendor Application is easily possible. We only will have to make 
minimal code changes as we are writing code to the standard specification. That is we simply have to tell our configuration to which vendor 
to use.   
 
• Saving a Java Object with JPA
Student theStudent = new Student("aum", "soni", “aumsoni2002@gmail.com");	// create Java object
entityManager.persist (theStudent);						// save it to database, 'entityManager' is a special JPA helper object.
With above lines of code, the data will get stored in the database.

• Retrieving a Java Object with JPA
Student theStudent = new Student("aum", "soni", “aumsoni2002@gmail.com");	// create Java object
entityManager.persist (theStudent);						// save it to database, 'entityManager' is a special JPA helper object.

// the database will automatically give our first object the id '1'. And with the help of that id, we can retrieve that object from database. 
int theId = 1;									// now retrieve from database using the primary key
Student myStudent = entityManager.find(Student.class, theId);			// 1st Parameter: NameOfTable.class, 2nd Parameter: id in integer to find a particular object.

• Querying for Java Objects
Let us retrieve/Query all students object from the 'Student' database table

TypedQuery<Student> theQuery = entityManager.createQuery("from Student", Student.class); // here we are saving a list of all student objects into 'theQuery'.
List<Student> students= theQuery.getResultList();					 // Now to retrieve all those objects, we have to make use of 'getResultList()'.


-- Hibernate, JPA and JDBC
• How does Hibernate/JPA relate to JDBC?
Hibernate/JPA uses JDBC in the background for all database communications
Hibernate/JPA is just an another layer of abstraction on top of JDBC.
So when our application uses the Hibernate/JPA framework, our app will actually store and retrieve the objects using the JPA API.
Hibernate/JPA does a lot of the low-level work for you, but in the background, it all goes through the standard JDBC API.


-- Setting up Development Enviornment
• MySQL Database
In this learning, we will use the MySQL Database
MySQL includes two components 
 MySQL Database Server
 MySQL Workbench

• MySQL Database Server
The MySQL Database Server is the main engine of the database
Stores data for the database
Supports CRUD features on the data

• MySQL Workbench
MySQL Workbench is a client GUI for interacting with the database
Create database schemas and tables
Execute SQL queries to retrieve data
Perform insert, updates and deletes on data
Handle administrative functions such as creating users

• Setting up Database Table - Overview
For this learning/project, we will be using two database scripts:
File: 01-create-user.sql
This file creates a new MySQL user for our application with user-id: springstudent and password: springstudent

File: 02-student-tracker.sql
This file creates a new database table: student
And four fields in it: id, first_name, last_name and email


-- Setting Up Database Table - Coding
Steps:
1. Open MySQL Workbench
2. Open the 'root' MySQL Connections which you created while doing installation process.
3. Goto: File --> Open SQL Script --> open '01-create-user.sql'
4. Now to create a new user: Run the above opened sql file by clicking on the golden thunder sign on workbench.
5. We have successfully created a new user. 
6. Now we have to create a new user for that newly created user.
7. Goto: Home Page --> Click on plus button which is right after 'MySQL Connections' --> Enter 'Connection name' and 'username' 
8. --> Click 'Test Connection' --> Enter password --> Click ok 
9. Now we have created a new connection.
10. Goto: Open 'springstudent' connection --> File --> Open SQL Script --> open '02-student-tracker.sql'
11. Now to create a new schemas: Run the above opened sql file by clicking on the golden thunder sign on workbench.
12. Goto: Schemas --> Refresh --> You will find 'student_tracker'


-- Setting Up Spring Boot Project - Overview

• Automatic Data Source Configuration
In Spring Boot, Hibernate is the default implementation of JPA
EntityManager is main component for creating queries etc
EntityManager is from Jakarta Persistence API (JPA)
Based on configs, Spring Boot will automatically create the beans: DataSource, EntityManager, ...
We can then inject these into our app, for example our DAO

• Setting up Project with Spring Initialzr
At Spring Initializr website, start.spring.io
Add dependencies
 MySQL Driver: mysql-connector-j
 Spring Data JPA: spring-boot-starter-data-jpa

• Spring Boot - Auto configuration
Spring Boot will automatically configure our data source for us.
Based on entries from Maven pom file
 JDBC Driver: mysql-connector-j
 Spring Data (ORM): spring-boot-starter-data-jpa
Spring boot reads DB connection info from application .properties

File: application.properties
spring.datasource.url=jdbc:mysql://localhost:3306/student_tracker
spring.datasource.username=springstudent
spring.datasource.password=springstudent

No need to give JDBC driver class name Spring Boot will automatically detect it based on URL.

• Creating Spring Boot - Command Line App
We will create a Spring Boot - Command Line App
This will allow us to focus on Hibernate / JPA
Later in the learning, we will apply this to a CRUD REST API

Example:
import org. springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot. autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
@SpringBootApplication
public class Cruddemoapplication {
    public static void main(String[] args) {
        SpringApplication.run(CruddemoApplication.class, args);
    }

   @Bean
   public CommandLineRunner commandlineRunner(String[] args) {
       return runner -> {
          System.out.println("Hello world");
       }; 
   }
}

This above CommandLineRunner is from the Spring framework, which is basically  a hook that allows us to execute code
after the Spring Beans have been loaded into the application context.
Inside it, we have a return statement 'runner' which is a Lambda Expression where we can basically add our custom code to interact with the database.

 
-- Setting Up Spring Boot Project - Coding - Part 1
-- Setting Up Spring Boot Project - Coding - Part 2
• Example for how to setup project for making use of Hibernate/JPA for crud operations
  Project: 01-cruddemo-student


-- JPA Annotations - Overview

• JPA Dev Process - To Do List
1. Annotate Java Class
2. Develop Java Code to perform database operations

• Terminology
Entity Class: It is just a Java Class that is mapped to a database table.

• Object-To-Relational Mapping (ORM)
We have our Java class called 'Student' that has four fields, id, firstName, lastName, and email, we'll make use of JPA, 
and we'll map it to a given database table called 'Student' that has four columns, id, first_name, last_name, and email.
So we need to kind of provide mappings between the two.

As we know, Hibernate is the default JPA implementation in Spring Boot.
Example:
Java Class		-->	HIBERNATE/JPA		-->	Database Table
Student			<--	(Middleware)		<--	Student
id: int								id INT
firstName: String						first_name VARCHAR(45)
lastName: String						last_name VARCHAR(45)
email: String							email VARCHAR(45)

• Entity Class
At a minimum, the Entity class: 
Must be annotated with @Entity
Must have a public or protected no-argument constructor. The class can also have other constructors.

• Java Annotations
Step 1: Map class to database table
@Entity					// here we are declaring our 'Student' java class as an Entity Class. 
@Table(name="student")			// here we are mapping our java class to the database table 'student'. (name="tableName")
public class Student{
    ...
}

Step 2: Map fields to database columns
@Entity
@Table(name="student")
public class Student{
    @id
    @Column(name="id")			// here we are mapping our 'id' field of java class to the 'id' column of the Database table.
    private int id;

    @Column(name="first_name")		// here we are mapping our 'firstName' field of java class to the 'first_name' column of the Database table.
    private String firstName;
}

• @Column and @Table - Optional
the use of @Column is optional.
If you do not want to specify @Column then the column name must be same name as Java field.
Same goes with the @Table too. 	

• Terminology
Primary Key: Uniquely identifies each row in a table. Must be a unique value. Cannot contain NULL values

• MySQL - Auto Increment
In the MySQL database, we can make use of an auto increment. We can define our primary key, and then we can specify that it's an auto increment.
So In below code, we have a little snippet here, create table student.
We have this column id which of type int, we delcare here that it will never be null, and then we specify auto increment.
Behind the scenes, MySQL will keep track by automatically incrementing this id, and making sure it's a unique value.
We also specify that our given column id is the primary key for this given table.
MySQL Code:
CREATE TABLE student (
  id int NOT NULL AUTO_INCREMENT,			// here we are declaring that id cannot be null and we specify auto increment on it.
  first_name varchar(45) DEFAULT NULL,
  last_name varchar(45) DEFAULT NULL,
  email varchar(45) DEFAULT NULL,
  PRIMARY KEY (id)					// here we are declaring our 'id' column as the primary key of this table.
}

• JPA Identity - Primary Key
Once we specify auto increment into our database table, we also need to declare it into our Java Code with @Id annotation
@Entity
@Table(name="student")
public class Student{
    @Id							// here we are declaring our 'id' field as the Unique Identifier of this Entity Class
    @GeneratedValue(strategy=GenerationType.IDENTITY)	// here what we are saying is that this id value will be generated by the database and managed by the database. 
							// There's no need for our code to manually try and keep track of that given id.
    @Column(name="id")					// here we are mapping our 'id' field of java class to the 'id' column of the Database table.
    private int id;
}

• ID Generation Strategies
Name				Description
GenerationType.AUTO		Pick an appropriate strategy for the particular database
GenerationType.IDENTITY		Assign primary keys using database identity column
GenerationType.SEQUENCE		Assign primary keys using a database sequence
GenerationType.TABLE		Assign primary keys using an underlying database table to ensure uniqueness

• Custom generation strategy
We can define your own CUSTOM generation strategy :-)
Create implementation of org. hibernate.id.IdentifierGenerator
Override the method: public Serializable generate(...)


-- JPA Annotations - Coding
• Example for how to create an Entity Class, Map that class to database table and map class's fields to database table's columns
  Project: 01-cruddemo-student-create


-- Saving a Java Object with JPA - Overview
• Sample App Features
For this project, we will be doing CRUD operation on student object.
Create a new Student
Read a Student
Update a Student
Delete a Student


• Student Data Access Object
The Data Access object(DAO) is responsible for interacting with the database.
cruddemo App	<--->	Student DAO	<--->	database

Our DAO needs a JPA Entity Manager
JPA Entity Manager is the main component for saving / retrieving entities
Student DAO	Entity Manager	<--->	data source	<--->	database

• DAO Methods
save(...)
findById(...)
findAll()
findByLastName(...)
update(...)
delete(...)
deleteAll()

• JPA Entity Manager
Now as far as the other supporting components, our JPA entity manager needs a data source.
So the data source basically defines the database connection information and the JPA entity manager and the data source
are automatically created by Spring Boot, based on information from our native pom file, and also information from our application properties
such as the URL, user ID, and password. It'll actually connect to the database. And then we can auto wire or inject the JPA entity manager into our student DAO.	

• @Transactional Annotation
The @Transactional annotation in JPA (Java Persistence API) is used to define the transactional boundaries for a method or a class. 
When this annotation is applied to a method, it indicates that a transaction will be initiated before the method is executed and 
committed or rolled back after the method completes. When applied to a class, it applies to all the public methods of the class. 
This annotation is used to manage transactions in JPA and ensures that the database is kept in a consistent state in case of any 
errors during the execution of the method.

• @Repository Annotation
This annotation is a sub-annotation of @Component annotation.
So this annotation is applied to DAO implementations and Spring will automatically register the DAO implementation, thanks to component scanning.
And then Spring will provide translation of any JDBC related exceptions.
So here when we say translation, meaning that if we have any checked JDBC exceptions and then Spring will translate these two unchecked
exceptions basically it makes the coding a bit easier here for interfacing with a given database.

• Student DAO:		Student DAO	Entity Manager	<--->	data source	<--->	database
Steps:
1. Define DAO interface
import com.practice.cruddemo.entity.Student;
public interface StudentDAO {				// Creating an Interface by the name 'StudentDAO'. 
    void save(Student theStudent);			// defining a method 'save' which takes an object of type 'Student' as an argument.
}

2. Define DAO implementation. Than Inject the entity manager
import com.practice.cruddemo.entity.Student;
import jakarta.persistence.EntityManager;
import org.springframework.beans.factory.annotation.Autowired;

@Repository
public class StudentDAOImpl implements StudentDAO {	// creating a class 'StudentDAOImpl' which implements 'StudentDAO' interface to use the method 'save'.
    private EntityManager entityManager;		// creating a field 'entityManager' of type 'EntityManager' which will be assigned an instance of type 'EntityManager' through constructor 

    @Autowired
    public StudentDAOImpl(EntityManager theEntityManager) {	// here we have created a constructor which take an object(instance) of type 'EntityManager' as an argument
        entityManager = theEntityManager;		// here we are saving the coming new instance to the field 'entityManager'
    }
    
    @Override
    @Transactional					// when a method does create, update or delete within the database through a method, That method should have this annotation
    public void save(Student theStudent){		
	entityManager.persist(theStudent);    		// here we are overriding the 'save' method with saving the new Student object into our database table.
    }
}
 
3. Update main app
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;

@SpringBootApplication
public class CruddemoApplication {

    public static void main(String[] args) {
        SpringApplication.run(CruddemoApplication.class, args);
    }

    @Bean
    public CommandLineRunner commandlineRunner(StudentDAO studentDAO) { // here we are injecting an object 'studentDAO' of type 'StudentDAO' to use this interface's methods
        return runner -> {
            createStudent(studentDAO);		// here we are sending the same object to the method 'createStudent' as an argument. 
        };
    }
	
    private void createStudent(StudentDAO studentDAO){
       // create the student object
       System.out.println("Creating new student object...");
       Student newStudent = new Student("aum", "soni", "aumsoni2002@gmail.com");

       // save the student object
       System.out.println("Saving student object...");
       studentDAO.save(newStudent);

       // display id of the saved student
       System.out.println("The student is saved. The generated ID is: " + newStudent.getId()); 
    }
}


-- Saving a Java Object with JPA - Coding - Part 1
-- Saving a Java Object with JPA - Coding - Part 2
• Example for how to create a new student object into our MySQL Database table
  Project: 01-cruddemo-student-create


-- Changing Index of MySQL Auto Increment
• Changing the start index value of 'id' to 3000 in our database table
Workbench: SQL File
ALTER TABLE student_tracker.student AUTO_INCREMENT=3000;

• Reset the AUTO_INCREMENT value to 1
Workbench: SQL File
TRUNCATE student_tracker.student		// The 'TRUNCATE' will remove all data from the database table and reset AUTO_INCREMENT to start with 1.



-- Reading Objects with JPA - Overview
• Read/Retrieve
// retrieve/read from database using the primary key
// in this example, retrieve Student with primary key: 1
Student myStudent = entityManager.find(Student.class, 1);

• Development Process
1. Add new method to DAO interface
import com.practice.cruddemo.entity.Student;
public interface StudentDAO {
    ...
    Student findById(Integer id);	// defining a method 'findById' which takes 'id' of type 'Integer' as an argument and returns an object of type student
}

2. Add new method to DAO implementation
@Repository
public class StudentDAOImpl implements StudentDAO {
    private EntityManager entityManager;

    // inject entity manager using constructor injection
    @Autowired
    public StudentDAOImpl(EntityManager theEntityManager) {    
        entityManager = theEntityManager;        
    }

    @Override
    @Transactional                    
    public void save(Student theStudent) {
        entityManager.persist(theStudent);  
    }
 
    @override
    public Student findById(Integer id){		// here we are creating a method 'findById' that will take 'id' of type Integer as an argument.
    	return entityManager.find(Student.class, id);	// here we will send the above 'id' and the 'Student' class as argument to find the data which has the same id. 
    }
}

3. Update main app
public class CruddemoApplication {

    ...

    private void readStudent(StudentDAO studentDAO) {
        // create the student object
        System.out.println("Creating new student object...");
        Student secondStudent = new Student("shivang", "soni", "shivangsoni1998@gmail.com");

        // save the student object
        System.out.println("Saving student object...");
        studentDAO.save(secondStudent);

        // display id of the saved student
        System.out.println("The student is saved. The generated ID is: " + secondStudent.getId());

        // Now that a new student will get created with above steps lets retrieve that student and print it in terminal

        // Retrieve student based on its id
        System.out.println("Retrieving student with id: " + secondStudent.getId());

        // here we are calling the 'findById' method of 'StudentDAO' interface which will find the student object from database table and return it
        Student readSecondStudent = studentDAO.findById(secondStudent.getId());

        // Printing the returned student Object
        System.out.println("Found the student: " + readSecondStudent);
    }
}


-- Reading Objects with JPA - Coding
• Example for how to read a single student from the MySQL database table
  Project: 02-cruddemo-student-read


-- Querying Objects with JPA - Overview
• JPA Query Language(JPQL)
JPA has the JPA query language or JPQL. It's a query language for retrieving objects. It's similar in concept to SQL,
where you can select from a given table and grab some data accordingly.
You can also make use of constraints/selectors like 'where', 'like'. You can order the data, join, so and so forth.
However, the difference here is that JPQL is based on the entity name and entity fields as opposed to the direct 
table names and table columns. So when you use JPQL, by default, you make use of the entity name and entity fields.

• Retrieving all Students
In below code, the 'Student' in 'FROM Student' is our Entity Class which we created into our entity package. It is not the name of our database table
We have to use the Entity name here because all JPQL syntax is based on entity name and entity fields
TypedQuery<Student> theQuery = entityManager.createQuery("FROM Student", Student.class);
List<Student> students = theQuery.getResultList(); 

• Retrieving Students where lastName='aum'
As all JPQL syntax is based on entity name and entity fields, In below code we made use of 'lastName' entity field
TypedQuery<Student> theQuery = entityManager.createQuery("FROM Student WHERE lastName='soni'", Student.class);
List<Student> students = theQuery.getResultList();

• Retrieving Students using 'OR'
TypedQuery<Student> theQuery = entityManager.createQuery("FROM Student WHERE lastName='soni' OR firstName='aum'", Student.class);
List<Student> students = theQuery.getResultList();

• Retrieving Students using 'LIKE'
// Match email address that ends with '@gmail.com'
TypedQuery<Student> theQuery = entityManager.createQuery("FROM Student WHERE email LIKE '%@gmail.com'", Student.class);
List<Student> students = theQuery.getResultList();

• JPQL Named Parameters
public List<Student> findByLastName(String theLastName) { // here we are creating a method 'firdByLastName' which takes 'theLastName' of type String as an argument
    // Now in below code, we are just getting a student with its lastName but we are using ':theData' which gets swap with the comming 'lastName'.  
     TypedQuery<Student> theQuery = entityManager.createQuery("FROM Student WHERE lastName=:theData", Student.class); 
    theQuery.setParameter("theData", theLastName) ; // The swapping part is done here with this syntax.
    return theQuery.getResultList();	// here we are just returing the list.
}

• Development Process
1. Add new method to DAO interface
public interface StudentDAO {               
    ...
    List<Student> findAll();	// here we are creating method 'findAll' which will return list of students
}

2. Add new method to DAO implementation
@Repository
public class StudentDAOImpl implements StudentDAO {
    private EntityManager entityManager;

    // inject entity manager using constructor injection
    @Autowired
    public StudentDAOImpl(EntityManager theEntityManager) {    
        entityManager = theEntityManager;        
    }

    @Override
    @Transactional                    
    public void save(Student theStudent) {
        entityManager.persist(theStudent);  
    }
 
    @Override
    public Student findById(Integer id){		
    	return entityManager.find(Student.class, id);
    }

    @Override
    public List<Student>findAll(){
	TypedQuery<Student> theQuery = entityManager.createQuery("FROM Student", Student.class); // retrieving all student objects from the database table
        return theQuery.getResultList(); 							 // returning the list of all student objects
    }
}

3. Update main app
@SpringBootApplication
public class CruddemoApplication {

    public static void main(String[] args) {
        SpringApplication.run(CruddemoApplication.class, args);
    }

    @Bean
    public CommandLineRunner commandlineRunner(StudentDAO studentDAO) { // here we are injecting an object 'studentDAO' of type 'StudentDAO' to use this interface's methods
        return runner -> {
            queryAllStudents(studentDAO);
        };
    }

    private void queryAllStudents(StudentDAO studentDAO) {
        // here we are calling 'findAll' method of 'StudentDAO' interface which will find the all student objects from database table and return it
        List<Student> allStudents = studentDAO.findAll();

        // Printing all student objects through enhanced for loop
        for (Student eachStudent : allStudents) {
            System.out.println(eachStudent);
        }
    }
}


-- Querying Objects with JPA - Coding - Part 1
• Example for how to query all student objects
Project: 03-cruddemo-student-query-findAll


-- Querying Objects with JPA - Coding - Part 2
• Example for how to query a student by its last name
Project: 03-cruddemo-student-query-findByLastName


-- Updating Objects with JPA - Overview
• Update a Student
Student theStudent = entityManager.find(Student.class, 1);	// first we find the student object through its 'id'
myStudent.setFirstName( "amit" ); 				// Second, we change first name to "amit"
entityManager.merge(theStudent); 				// Lastly, we update the student object's first_name which has id=1 in our database table.

• Update the last name for all students
In below code, we are updating all student object's last name to 'Tester'. The total number of updated rows will be saved in 'numOfRowsUpdated'
int numOfRowsUpdated = entityManager.createQuery (“UPDATE Student SET lastName='Tester'”).executeUpdate();

• Development Process
1. Add new method to DAO interface
public interface StudentDAO {               
    ...
    void update(Student theStudent)	// here we are creating method 'update' which will take an object 'theStudent' of type 'Student'.
}

2. Add new method to DAO implementation
@Repository
public class StudentDAOImpl implements StudentDAO {
    private EntityManager entityManager;

    // inject entity manager using constructor injection
    @Autowired
    public StudentDAOImpl(EntityManager theEntityManager) {    
        entityManager = theEntityManager;        
    }

    @Override
    @Transactional				// when a method does create, update or delete within the database through a method, That method should have this annotation
    public void update(Student theStudent){
	entityManager.merge(theStudent);
    }
}

3. Update main app
@SpringBootApplication
public class CruddemoApplication {

    public static void main(String[] args) {
        SpringApplication.run(CruddemoApplication.class, args);
    }

    @Bean
    public CommandLineRunner commandlineRunner(StudentDAO studentDAO) { // here we are injecting an object 'studentDAO' of type 'StudentDAO' to use this interface's methods
        return runner -> {
            updateStudent(studentDAO);
        };
    }

    private void updateStudent(StudentDAO studentDAO) {
        int studentId = 1;
	System.out.println("Getting student with id: " + studentId);
	Student toBeUpdatedStudent = studentDAO.findById(studentId);	// finding a student object with id equals to 1.
        System.out.println("Getting student with id: " + studentId);

        System.out.println("Updating student...");
        myStudent.setFirstName("amit");					// change first name to "amit"
        studentDAO.update(toBeUpdatedStudent);				// updating new changes into our database.
       
        System.out.println("Updated student: + toBeUpdatedStudent);	// display updated student
    }
}



-- Deleting Objects with JPA - Overview
• Delete a Student
int id = 1;
Student theStudent = entityManager.find(Student.class, id);	// first we find the student object through its 'id'
entityManager.remove (theStudent);				// Lastly, we remove that student object from our database table.

• Delete based on a condition
// here we are deleting all those student objects which have 'soni' as their last name. And it will save total number of deleted rows in 'numRowsDeleted'
int numRowsDeleted = entityManager.createQuery("DELETE FROM Student WHERE lastName='soni'").executeUpdate();

• Delete All Students
int numRowsDeleted = entityManager.createQuery("DELETE FROM Student").executeUpdate();

• Development Process
1. Add new method to DAO interface
public interface StudentDAO {               
    ...
    void delete(Integer id)	// here we are creating method 'delete' which will take 'id' of type 'Integer' as an argument.
}

2. Add new method to DAO implementation
@Repository
public class StudentDAOImpl implements StudentDAO {
    private EntityManager entityManager;

    // inject entity manager using constructor injection
    @Autowired
    public StudentDAOImpl(EntityManager theEntityManager) {    
        entityManager = theEntityManager;        
    }

    @Override
    @Transactional				// when a method does create, update or delete within the database through a method, That method should have this annotation
    public void delete(Integer id){
	Student theStudent = entityManager.find(Student.class, id);
	entityManager.remove(theStudent);
    }
}

3. Update main app
@SpringBootApplication
public class CruddemoApplication {

    public static void main(String[] args) {
        SpringApplication.run(CruddemoApplication.class, args);
    }

    @Bean
    public CommandLineRunner commandlineRunner(StudentDAO studentDAO) { // here we are injecting an object 'studentDAO' of type 'StudentDAO' to use this interface's methods
        return runner -> {
            deleteStudent(studentDAO);
        };
    }

    private void deleteStudent(StudentDAO studentDAO) {
        int studentId = 1;
	System.out.println("deleting student with id: " + studentId);
	studentDAO.delete(studentId);   
    }
}


-- Create Database Tables from Java Code - Overview
• Create database tables: student
JPA / Hibernate provides an option to auto-magically create database tables. It creates tables based on Java code with JPA/ Hibernate annotations
and it is useful for development and testing.
We have our Java code with the annotations, we run it through this Hibernate tool, and then it'll actually generate the SQL
and also execute that SQL. Then it applies that on the given database. So there's no need for us to write any of the SQL.
Java code	-->	JPA/Hibernate	-->	SQL	-->	Database

• Configuration
In the Hibernate configuration file, we will set up a property as shown below and we give a property value.
Here we'll call it create. So when we run our application, Hibernate will drop the tables and then create them again from scratch.
And this is all based on the JPA/Hibernate annotations that are in our Java code.
In Spring Boot configuration file: application.properties
spring.jpa.hibernate.ddl-auto=create

• Creating Table based on Java Code
In our 'Student' class, we have put '@Table' with table name to let Spring Boot know that this class is what going to be mapped with the database table 'student'.
We also have put '@Columns' for all fields that we consider them as column in database table.
Now If the 'student' table in our database does not exist, what JPA/Hibernate tool will do is, it will create a sql query based on annotations we used and execute that
query to create a table with same table name and columns with same field names in the database. 

• Configuration - application.properties
spring.jpa.hibernate.ddl-auto=PROPERTY-VALUE
Property Value 		Property Description
none 			No action will be performed
create-only 		Database tables are only created
drop 			Database tables are dropped
create 			Database tables are dropped followed by database tables creation
create-drop 		Database tables are dropped followed by database tables creation. On application shutdown, drop the database tables
validate 		Validate the database tables schema
update 			Update the database tables schema

• Use Case of using: spring.jpa.hibernate.ddl-auto=create
Automatic table generation is useful for
 Database integration testing with in-memory databases
 Basic, small hobby projects 


-- Create Database Tables from Java Code - Coding - Part 1
-- Create Database Tables from Java Code - Coding - Part 2
• Example for how to create database table by only making use of Java Code and zero use of sql queries
Project: 08-cruddemo-create-db-tables-automatically


------------------------------------------------------------------------------------------- Section 4 ---------------------------------------------------------------------------------------
-- What are REST Services - Part 1

• Business Problem
Build a client app that provides the weather report for a city
Need to get weather data from an external service

• Application Architecture

My Weather App		---- Pass city name as string ----->		Weather Service(external)
app that we are								Provided by External Third
creating(CLIENT)        <--- Send back Weather Report ------		Party (SERVER)


• Requirements
How will we connect to the Weather Service?
 We can make REST API calls over HTTP
 REST: REpresentational State Transfer
 Lightweight approach for communicating between applications

What programming language do we use?
 REST is language independent
 The client application can use ANY programming language
 The server application can use ANY programming language

What is the data format?
 REST applications can use any data format
 Commonly see XML and JSON
 JSON is most popular and modern
 JSON Stands for JavaScript Object Notation 

Possible Solution
 Use online Weather Service API provided by: openweathermap.org
 Provide weather data via an API
 Data is available in multiple formats: JSON, XML etc ...


Call Weather Service
 The API documentation gives us the following:
 Pass in the city name
 api.openweathermap.org/data/2.5/weather?q={city name}
 OR
 api.openweathermap.org/data/2.5/weather?q={city name},{country code}

Response - Weather Report
 The Weather Service responds with JSON
{
   ...
   "temp": 14,
   "temp_min": 11,
   "temp_max": 17,
   "humidity": 81,
   "name": "London"
   ...
}


-- What are REST Services - Part 2

• Example: Customer Relationship Manager(CRM) App
CRM	----- Get Customers ----->	CRM Service		(In this Project, we will create this CRM Service which will pass back customer data as json.)
App	<---- Customer List ------	(spring-rest)


-- JSON Basics
• What is JSON?
JavaScript Object Notation is just a plain text data
Lightweight data format for storing and exchanging data ... plain text
Language independent, not just for JavaScript 
Can use with any programming language: Java, C#, Python etc ...
 
• Simple JSON Example
Curley braces define objects in JSON
Object members are name:value pairs and they are delimited by colons
Name is always in double-quotes
In below example, the name is id, firstName, lastName and active.
		  the value is 14, Mario, Rossi and true
{
   "id": 14,
   “firstName": "Mario",
   “lastName": "Rossi",
   "active": true
}


-- Spring Boot REST HTTP Basics

• REST over HTTP
Most common use of REST is over HTTP
Leverage HTTP methods for CRUD operations

HTTP Method 		CRUD Operation
POST 			Create a new entity
GET 			Read a list of entities or single entity
PUT 			Update an existing entity
DELETE 			Delete an existing entity

• HTTP Messages
My CRM App	--- HTTP Request Message --->		CRM REST Service
(Client)        <-- HTTP Response Message ---		(Server)

• HTTP Request Message
The HTTP Request Message contain mainly 3 things:
Request line: the HTTP command
Header variables: request metadata
Message body: contents of message

• HTTP Response Message
Response line: server protocol and status code
Header variables: response metadata
Message body: contents of message

• HTTP Response - Status Codes
Code Range 		Description
100 - 199 		Informational
200 - 299 		Successful
300 - 399 		Redirection 
400 - 499 		Client error
500 - 599		Server error

• MIME Content Types
The message format is described by MIME content type stands for Multipurpose Internet Mail-Extension
Basic Syntax: type/sub-type
Examples
 text/html, text/plain
 application/json, application/xml, ...

• Client Tool
We need a client tool to send HTTP requests to the REST Web Service / API
Plenty of tools available: curl, Postman, etc ...


-- Spring Boot REST Controller - Overview - Part 1

• Spring REST Hello World
REST		--- /test/hello --->		Rest		(we will write code to create this Rest Service)	
Client          <--- Hello World ---		Service

• Spring REST Controller
@RestController				// here this adds REST Support
@RequestMapping("/test")
public class DemoRestController {
 @GetMapping ("/hello")			// Access the REST endpoint at /test/hello
 public String sayHello() {
  return "Hello World!";		// Returns content to client 
 }
}


-- Spring Boot REST Controller - Overview - Part 2
• Development Process
1. Add Maven dependency for Spring Boot Starter Web
File: pom.xml
<!-- Add Spring Boot Starter Web -->
<dependency>
  <groupId>org.springframework.boot</groupId>
  <artifactId>spring-boot-starter-web</artifactId>
</dependency>

2.Create Spring REST Service using @RestController
@RestController				// here this adds REST Support
@RequestMapping("/test")
public class DemoRestController {
 @GetMapping ("/hello")			// Handles HTTP GET requests so we can access the REST endpoint at /test/hello 
 public String sayHello() {
  return "Hello World!";		// Returns content to client 
 }
}


-- JSON Jackson Data Binding
• what is Java JSON Data Binding
Data binding is the process of converting JSON data to a Java POJO.

JSON   <---->   Java POJO
Here we are starting over on the left with JSON data and then we have our Java POJO. And so we can use data binding to convert from JSON
over to a Java POJO. So it will read the contents of that JSON string or file and then populate the Java object with that given data.
Or you can go the other way. You can start with the Java POJO and then send it down to an actual JSON string or JSON file.
Now this whole process is called data binding.

• Java JSON Data Binding using Jackson
Spring uses the Jackson Project behind the scenes
Jackson handles data binding between JSON and Java POJO
Spring Boot Starter Web automatically includes dependency for Jackson.

• Jackson Data Binding
By default, Jackson will call the appropriate getter/setter methods when it handles the conversions.
So if you're converting from JSON to POJO it will call up given setter methods.
When you go from POJO to JSON it will call the getter methods.
Here on the left hand side, I have this JSON object for id, first name, last name, and active. And then over on the right hand side,
i have this Java POJO for a student. And so what will happen here is that we will actually do the conversion
between JSON going to a Java POJO or starting with a Java POJO, like a student object, and then actually sending it down to a JSON string.
So Jackson can help us with all of this processing. And again, the important thing here is that it will actually use the getter and setter methods
for handling some of this processing.
{
  "id": 14,
  “firstName": "Mario",		------>		Java POJO
  "lastName": "Rossi",		<------		Student
  "active": true
}

• JSON to Java POJO
Convert JSON to Java POJO, Jackson will call setter methods on POJO.
Converting JSON to Java POJO. Jackson is gonna call the setter methods on the POJO.
So starting over here on the left hand side with this JSON object then we have this POJO, again, plain old JAVA class student.
We have some fields defined and we have the getter/setter methods.
So the important thing here, again, is that Jackson's gonna call the setter methods on the POJO.
So for ID, they're gonna call set ID. All right, and so, Jackson will actually do this work for you.
For first name it's gonna call set first name. For last name it's gonna call set last name.
And for active it's gonna call set active. So you see the pattern in here, right?
They basically use the name from the actual JSON. They call set. They take the first character of that name, make it cap,
and then use that to make the actual method call.
Now, again, I really wanna emphasize here. Jackson calls the setter methods. So it doesn't access any
of the internal private fields directly on the POJO. It'll only call the given setter methods.
So you have to make sure that you have those setter methods defined,
and in this case, making sure that they match up accordingly for this given example
{
  "id": 14,
  “firstName": "Mario",		Call setter methods		Java POJO
  "lastName": "Rossi",		------------------>		Student
  "active": true		Jackson will do this work
}

• Java POJO to JSON
Convert Java POJO to JSON, Jackson will call getter methods on POJO.
{
  "id": 14,
  “firstName": "Mario",		Call getter methods		Java POJO
  "lastName": "Rossi",		<------------------		Student
  "active": true		Jackson will do this work
}

• Spring and Jackson Support
When building Spring REST applications:
Spring will automatically handle Jackson Integration
JSON data being passed to REST controller is converted to POJO
Java object being returned from REST controller is converted to JSON
All these Happens automatically behind the scenes.


-- Spring Boot REST POJO - Overview
• Create a new Service
Returns a list of students
GET Method: /api/students  -- by entering this URL, it will make a GET request which will return a list of students.


• Spring REST Service
REST		--- /api/students 			       -->	REST 
Client		<--- returns a list of students in JSON format --- 	Service (we will write the code for service)

Our REST Service will return List<Student>
So we need to convert List<Student> to JSON
Jackson can help us out with this ...

• Behind the scenes
REST		--- /api/students 			       -->	Spring REST + Jackson		--->		REST 
Client		<--- returns a list of students in JSON format ---	Jackson will convert 		<--- 		Service (we will write the code for service)
								        List<Student> to JSON				returns List<Student>

-- Development Process
1. Create Java POJO class for Student
File: Student.java
public class Student{
   private String firstName;
   private String lastName;

   public Student(String firstName, String lastName){
      this.firstName = firstName;
      this.lastName = lastName;
   }
  
   public String getFirstName() {
      return firstName;
   }

   public void setFirstName (String firstName) {
      this.firstName = firstName;
   }

   public String getLastName() {
      return lastName;
   }

   public void setLastName (String lastName) {
      this.lastName= lastName;
   } 
}

2.Create Spring REST Service using @RestController
File: StudentRestController.java 
@RestController
@RequestMapping ("/api")
public class Student RestController {
   // define endpoint for "/students" return list of students
   @GetMapping ("/students")
   public List<Student> getStudents() {
      List<Student> theStudents = new ArrayList<>();		// here we are creating a new ArrayList of type 'Student'. 

      theStudents.add(new Student ("Poornima", "Patel"));	// here we are adding new members/elements/students in the above created ArrayList.(Hard Coded) 
      theStudents.add(new Student ("Mario", "Rossi"));
      theStudents.add(new Student ("Mary", "Smith"));

      return theStudents;					// here Jackson will convert List<Student> to JSON Format String and then return it. 
   }
}


-- Spring Boot REST POJO - Coding - Part 1
-- Spring Boot REST POJO - Coding - Part 2
Example: how to use Jackson for data binding between REST Client and REST Services
Project: 02-spring-boot-rest-crud-students-list-base


-- Spring Boot REST Path Variables - Overview
• Path Variables
Retrieve a single student by id.
GET Method: /api/students/{studentId}	-- by entering this URL, it will make a GET request which will return a single student which has studen id written in URL.
	    /api/students/0		-- Now this last digit is the studend id and it is known as path variable.
            /api/students/1
            /api/students/2...		so on

• Spring REST Service
REST		--- /api/students/{studentId}     -->	REST
Client  	<-- JSON Formatted single student ---	Service (we will write the code for service)

• Behind the scenes
REST		--- /api/students/{studentId} 		       -->	Spring REST + Jackson		--->		REST 
Client		<--- returns a single student in JSON format   ---	Jackson will convert 		<--- 		Service (we will write the code for service)
								        Student to JSON					returns a Student
• Developement Process
1. Add request mapping to Spring REST Service
   Bind path variable to method parameter using @PathVariable
File: StudentRestController.java
@RestController
@RequestMapping ("/api")
public class StudentRestController {

   // define endpoint for "/students/{studentId}" return student at index
   @GetMapping ("/students/{studentId}")			// here it is neccessary to mention the path variable name in curly braces to let spring know that, it will vary.
   public Student getStudent (@PathVariable int studentId) {	// Now this annotation is letting spring know that the name 'studentId' is going to be use as index value and must be same as above name
      List<Student> theStudents = new ArrayList<> ();

      // populate theStudents
      theStudents.add(new Student ("Poornima", "Patel"));	// here we are adding new members/elements/students in the above created ArrayList.(Hard Coded) 
      theStudents.add(new Student ("Mario", "Rossi"));
      theStudents.add(new Student ("Mary", "Smith"));

     return theStudents.get(studentId);
   }
}


-- Spring Boot REST Exception Handling - Overview - Part 1
-- Spring Boot REST Exception Handling - Overview - Part 2
• Problem
When a user enters an studentId which is out of the array length. Then the spring throws below error:
status: 500
error: Internal Server Error

• Solution
Now we can handle such problem with Spring Boot REST Exception handling through which we can return a JSON formatted customized String such as below:
status: 404
message: "Student with id 9999 is not found." 

• Bigger Picture
REST		--- /api/students/9999 -->	REST SERVICE + 
Client          <-- exception error message --	Exception Handler


• Development Process
1. Create a custom error response class
   The custom error response class will be sent back to client as JSON
   We will define the custom error response class as Java Class(POJO)	[Class name: StudentErrorResponse, it will have 3 private fields: status, message, timeStamp]
   Jackson will handle converting it to JSON:	{"status": 404, "message": "Student with id 9999 is not found.", "timeStamp": 123456789}   
File: StudentErrorResponse.java
public class StudentErrorResponse {
   private int status;
   private String message;
   private long timestamp;
   // constructors

   // getters / setters

}

2. Create a custom exception class
   The custom student exception will used by our REST service
   In our code, if we can't find student, then we'll throw an exception
   Need to define a custom student exception class: StudentNotFoundException
File: StudentNotFoundException
public class StudentNotFoundException extends RuntimeException { // Here we are making use of inheritance, so that we can make use of fields and methods of RuntimeException class
   public StudentNotFoundException(String message) {
      super (message); // this will call the constructor of the super class which is the RuntimeException class and we are sending the 'message' as argument.			
   }
}

3. Update REST service to throw exception if student not found
File: StudentRestController.java
@RestController
@RequestMapping ("/api")
public class StudentRestController {

   // define endpoint for "/students/{studentId}" return student at index
   @GetMapping ("/students/{studentId}")			// here it is neccessary to mention the path variable name in curly braces to let spring know that, it will vary.
   public Student getStudent (@PathVariable int studentId) {	// Now this annotation is letting spring know that the name 'studentId' is going to be use as index value and must be same as above name
      List<Student> theStudents = new ArrayList<> ();

      // populate theStudents
      theStudents.add(new Student ("Poornima", "Patel"));	// here we are adding new members/elements/students in the above created ArrayList.(Hard Coded) 
      theStudents.add(new Student ("Mario", "Rossi"));
      theStudents.add(new Student ("Mary", "Smith"));

      // check the studentId against the length of array
      if(studentId >= theStudents.size() || (studentId < 0)){
         throw new StudentNotFoundException("Student with id " + studentId + "is not found.");
      }
     return theStudents.get(studentId);
   }
}

4. Add an exception handler method using @ExceptionHandler
   Define exception handler method(s) with @ExceptionHandler annotation
   Exception handler will return a ResponseEntity
   ResponseEntity is a wrapper for the HTTP response object
   ResponseEntity provides fine-grained control to specify: HTTP status code, HTTP headers and Response body
File: StudentRestController.java
@RestController
@RequestMapping("/api")
public class StudentRestController {

   @ExceptionHandler	// This annotation is used to let spring know that below method is used in Exception handling
   public ResponseEntity<StudentErrorResponse> handleException (StudentNotFoundException exc) { // this exception handling method is of type 'StudentErrorResponse' 
      StudentErrorResponse error = new StudentErrorResponse();
      error.setStatus (HttpStatus.NOT_FOUND.value());
      error.setMessage (exc.getMessage());
      error.setTimeStamp (System.currentTimeMillis()); 
      return new ResponseEntity<> (error, HttpStatus. NOT_FOUND);
   } 
}


-- Spring Boot REST Global Exception Handling - Overview
• Problems with having normal Exception Handler
Exception handler code is only for the specific REST controller.
It cannot be re-used by other controllers, if having multiple controllers in one project.

• PROS of having Global Exception handlers
It promotes reusablity.
It centralizes exception handling. 

• Spring @ControllerAdvice
@controllerAdvice is similar to an interceptor / filter
Pre-process requests to controllers
Post-process responses to handle exceptions
Perfect for global exception handling

• Bigger Picture
REST		--- /api/students/9999 	    -->		Controller Advice(pre-processing request)		----------------------->	REST SERVICE
Client          <-- exception error message ---	        Global Exception handling(post-processing response)	<--- Throw Exception ---	

• Development Process
1. Create new @ControllerAdvice
File: StudentRestExceptionHandler.java
@ControllerAdvice
public class StudentRestExceptionHandler{

} 

2.Refactor REST service ... remove exception handling code
In this step, we are going to cut the code from 'StudentRestController.java' file and so that we can paste it into the controller advice.

3. Add exception handling code to @ControllerAdvice
File: StudentRestExceptionHandler.java
@ControllerAdvice	// With the help of this annotation, it makes the below exception handling code available on a global basis, for a given application. 
public class Student RestExceptionHandler {
   @ExceptionHandler
   public ResponseEntity<StudentErrorResponse> handleException (StudentNotFoundException exc) {
      StudentErrorResponse error = new StudentErrorResponse();
      error.setStatus (HttpStatus. NOT_FOUND.value());
      error.setMessage (exc.getMessage());
      error.setTimeStamp (System.currentTimeMillis());
      return new ResponseEntity<>(error, HttpStatus. NOT_FOUND);
   }
}

-- Spring Boot REST Global Exception Handling - Coding
Example: How to write code for Global Exception Handling
Project: 06-spring-boot-rest-crud-students-global-exception-handling


-- Spring REST API Design
• REST API Design
Few things, we need to keep in mind before creating REST API in real-time projects:
Who will use our API?
How will they use our API?
Now design the API based on such requirements.

• API Design Process
1. Review API requirements
 Create a REST API for the Employee Directory
 REST clients should be able to	full CRUD operations including all below
  Get a list of employees
  Get a single employee by id
  Add a new employee
  Update an employee
  Delete an employee

2. Identify main resource/entity
To identify main resource/entity, look for the most prominent "noun"
For our project, it is "employee"
Convention is to use plural form of resource/entity: employees
So the endpoint of this application can be: /api/employees

3. Use HTTP methods to assign action on resource
HTTP Method 		CRUD Action
POST 			Create a new entity
GET 			Read a list of entities or single entity
PUT 			Update an existing entity
DELETE 			Delete an existing entity

• Employee Real-time Project
HTTP Method 	Endpoint 			CRUD Action
POST 		/api/employees 			Create a new employee
GET 		/api/employees 			Read a list of employees
GET 		/api/employees/{employeeId} 	Read a single employee
PUT 		/api/employees 			Update an existing employee
DELETE 		/api/employees/{employeeId} 	Delete an existing employee


-- Spring Boot REST API Design - API Design of Real-Time Projects (PayPal, Github and SalesForce)
• More API Examples
  Paypal: Invoicing API: https://developer.paypal.com/api/rest/
  POST 	 -- Create draft Invoice -- /v1/invoicing/invoices
  PUT  	 -- Update Invoice	 -- /v1/invoicing/invoices/{invoice_id}
  GET	 -- List Invoices	 -- /v1/invoicing/invoices
  GET	 -- show Invoice details -- /v1/invoicing/invoices/{invoice_id}
  DELETE -- Delete draft Invoice -- /v1/invoicing/invoices/{invoice_id}

  GitHub: Repository API: https://docs.github.com/en/rest/repos?apiVersion=2022-11-28#repositories
  POST   -- Create a new repository -- /user/repos
  GET    -- List all repositories   -- /user/repos
  GET    -- Get a repository        -- /repos/:owner/:repo
  DELETE -- Delete a repository     -- /repos/:owner/:repo

  SalesForce: Industries REST API: https://developer.salesforce.com/docs/atlas.en-us.api_rest_industries.meta/api_rest_industries/put.htm
  POST	 -- Create an Individual     -- /services/apexrest/clinic01/vl/individual/
  PUT    -- Update an Individual     -- /services/apexrest/clinic01/vl/individual/
  GET    -- Retrieve all Individuals -- /services/apexrest/vl/individual/
  GET    -- Retrieve one Individual  -- /services/apexrest/vl/individual/{individual_id}


-- Spring Boot REST Project Overview
• About what we will create in this Project
REST API with Spring Boot that connects to a database

• API requirements
Create a REST API for the Employee Directory
 REST clients should be able to	full CRUD operations including all below
  Get a list of employees
  Get a single employee by id
  Add a new employee
  Update an employee
  Delete an employee

• REST API
HTTP Method 	Endpoint 			CRUD Action
POST 		/api/employees 			Create a new employee
GET 		/api/employees 			Read a list of employees
GET 		/api/employees/{employeeId} 	Read a single employee
PUT 		/api/employees 			Update an existing employee
DELETE 		/api/employees/{employeeId} 	Delete an existing employee

• Development Process
1. Set up Database Dev Environment
2. Create Spring Boot project using Spring Initializr
3. Get list of employees
4. Get single employee by ID
5. Add a new employee
6. Update an existing employee
7. Delete an existing employee

• Application Architecture
Employee REST Controller   <---->   Employee Service   <---->   Employee DAO   <---->   Database 


-- Spring Boot REST Setup Sample Data
• employee.sql
1. File: employee.sql, 
2. Create a new database table: employee
3. Load table with sample data

Run the sql file on MySQL Workbench.
Step 1: Set up Database Dev Environment -- Completed


-- Spring Boot REST Create Project
Go to: https://start.spring.io/
 Project: Maven
 Spring Boot: 3.0.6
 Project Metadata: As per you
 Packaging: Jar
 Java: 17
 Dependencies:
  Spring Web [WEB]: Build web, including RESTful, applications using Spring MVC. Uses Apache Tomcat as the default embedded container.
  Spring Data JPA [SQL]: Persist data in SQL stores with Java Persistence API using Spring Data and Hibernate.
  Spring Boot DevTools [DEVELOPER TOOLS]: Provides fast application restarts, LiveReload, and configurations for enhanced development experience.
  MySQL Driver [SQL]: MySQL JDBC driver.

Generate it, run it on Intellij and we have created our project.
Step 2: Create Spring Boot project using Spring Initializr -- Completed


-- Spring Boot REST DAO
• Application Architecture
Employee REST Controller   <---->   Employee Service   <---->   Employee DAO   <---->   Database
                                                              (Standard JPA API)
• DAO Impl
@Repository
public class EmployeeDAOJpaImpl implements EmployeeDAO {	// The 'EmployeeDAO' must have same interface for consistent API
   private EntityManager entityManager;				// Creating private field of type EntityManager

   @Autowired
   public EmployeeDAOJpaImpl (EntityManager theEntityManager) { // This is constructor injection and the 'theEntityManager' is created automatically by Spring Boot
      entityManager = theEntityManager;				// saving it into our private field, so that we can do CRUD operations with it.
   }

   ...
}

• Get a List of Employees
@Override
public List<Employee> findAll() {
   // create a query
   TypedQuery<Employee> theQuery = entityManager.createQuery("from Employee", Employee.class);

   // execute query and get result list
   List<Employee> employees = theQuery.getResultList();

   // return the results
   return employees;
}

• Development Process
1. Update db configs in application.properties
2. Create Employee entity
3. Create DAO interface
4. Create DAO implementation
5. Creat REST controller to use DAO


-- Spring Boot REST DAO - Coding - Part 1
-- Spring Boot REST DAO - Coding - Part 2
-- Spring Boot REST DAO - Coding - Part 3
Example: how to do below 5 stesp
         1. Update db configs in application.properties
         2. Create Employee entity
         3. Create DAO interface
         4. Create DAO implementation
         5. Creat REST controller to use DAO
Project: 20-spring-boot-rest-crud-employee-list-employees


-- Spring Boot Define Service Layer - Overview
• Refactor: Adding a Service Layer
Employee Rest Controller  <---->  Employee Service  <---->  Employee DAO  <----> Database 

• Purpose of Service Layer
It is actually an implementation of the Service Facade design pattern.
It is an intermediate layer for your custom business logic.
And we can also use it to integrate data from multiple sources.

• Integrate Multiple Data Sources
					↱          <---->  Employee DAO   <---->  Database
Employee Rest Controller  <---->  Employee Service <---->  Skills DAO     <---->  Database
                                        ↳          <---->  Payroll DAO    <---->  Database
Provide controller with a single view of the data that we integrated from multiple backend datasources

• Specialized Annotation for Services
Spring provides the @Service annotation
@Service applied to Service implementations
Spring will automatically register the Service implementation, thanks to component-scanning

• Development Process
1. Define Service Interface
public interface EmployeeService {
   List<Employee> findAll();
}

2. Define Service implementation: Inject the EmployeeDAO
@Service
public class EmployeeServicelmpl implements EmployeeService {
   // inject EmployeeDAO ...
   @Override
   public List<Employee> findAll() {
      return employeeDAO.findAll();
   }
}


-- Spring Boot Define Service Layer - Coding
Example: How to add an Employee Service Layer 
Project: 21-spring-boot-rest-crud-employee-refactored-service-layer
Step 3: Get list of employees -- completed

-- Spring Boot DAO: Add, Update, Delete - Overview
• Service Layer - Best Practice
Best practice is to apply transactional boundaries at the service layer
It is the service layer’s responsibility to manage transaction boundaries
For implementation code
 Apply @Transactional on service methods
 Remove @Transactional on DAO methods if they already exist

• DAO: Get a Single Employee
@Override
public Employee findById(int theId){
   // get employee
   Employee theEmployee = entityManager.find(Employee.class, theId);
  
   // return employee
   return theEmployee;
}

• DAO: Add or Update employee
@Override
public Employee save(Employee theEmployee){
   // save or update the employee
   Employee dbEmployee = entityManager.merge(theEmployee);	// here if the id of 'theEmployee' is equal to 0, then it is saved as a new employee(add). If not then it has updated an existing one. 

   // return the updated or saved employee
   return dbEmployee;
} 

• DAO: Delete an existing employee
@Override
public void deleteById(int theId){
   // find the employee by id
   Employee theEmployee = entityManager.find(Employee.class, theId);
  
   // return employee
   entityManager.remove(theEmployee);
} 


-- Spring Boot DAO: Add, Update, Delete - Coding
Example: Adding Remaming CRUD Methods on DAO
Project: 22-spring-boot-rest-crud-employee-dao-find-add-update-delete


-- Spring Boot Service: Add, Update, Delete - Coding
Example: Adding Remaming CRUD Methods on Service
Project: 22-spring-boot-rest-crud-employee-service-find-add-update-delete

-- Spring Boot REST: Get Single Employee - Overview
• Read a Single Employee
REST	---- GET /api/employees/{employeeId} ---->	Employee 	 
Client  <---- employee information in JSON   -----	REST Controller

• Sending JSON to Spring REST Controllers
When sending JSON data to Spring REST Controllers
For controller to process JSON data, need to set a HTTP request header
Content-type: application/json
Need to configure REST client to send the correct HTTP request header

• Postman - Sending JSON in Request Body
Must set HTTP Request Header in Postman
Body: raw, JSON


-- Spring Boot REST: Get Single Employee - Coding
Example : Adding REST Controller method for getting a single employee
Project: 24-spring-boot-rest-crud-employee-rest-controller-get-single-employee 


-- Spring Boot REST: Add Employee - Coding 
Example : Adding REST Controller method for adding a single employee
Project: 25-spring-boot-rest-crud-employee-rest-controller-add-employee 


-- Spring Boot REST: Update Employee - Coding
Example : Adding REST Controller method for updating a single employee
Project: 26-spring-boot-rest-crud-employee-rest-controller-update-employee-and-delete-employee 


-- Spring Boot REST: Delete Employee - Coding
Example : Adding REST Controller method for deleting a single employee
Project: 26-spring-boot-rest-crud-employee-rest-controller-update-employee-and-delete-employee 


-- Spring Boot REST: Spring Data JPA - Overview
• The Problem 
We saw how to create a DAO for Employee: EmployeeDAO and EmployeeDAOJpaImpl
What if we need to create a DAO for another entity? such as Customer, Student, Product, Book...
Do we have to repeat all of the same code again???

• Creating a DAO
We may have noticed a pattern with creating DAOs.
Mose of the code is the same.
The only difference is the entity type and primary key type.

• Spring Data JPA - Solution
Spring Data JPA is the solution!!!
Create a DAO and just plug in your entity type and primary key
Spring will give you a CRUD implementation for FREE
It helps to minimize boiler-plate DAO code.
More than 70% reduction in code is possible, depending on use case

• JpaRepository
Spring Data JPA provides the interface: JpaRepository
Exposes methods (some by inheritance from parents)
Now we will be able to access methods such as: findAll(), findById(...), save(...), deleteById(...) and many others.
Now using this interface, we only have to plugin the 'Entity' and 'Primary Key'.
And they can be of any type, such as:
Entity: Product,	Primary Key type: Integer
Entity: Customer,	Primary Key type: Integer
Entity: Student,	Primary Key type: Integer

• Development Process
1. Extend JpaRepository interface
public interface EmployeeRepository extends JpaRepository<Employee, Integer> {	// here we are mentioning the Entity type as 'Employee' and Primary Key type as 'Integer' which is necessary
  // that's it ... no need to write any code LOL! and still we will have access to methods like findAll(), findById(...), save(...), deleteById(...) and many others.
}

2. Use your Repository in your app (No need for an Implementation class)
@Service
public class EmployeeServiceImpl implements EmployeeService {
   private EmployeeRepository employeeRepository;

   @Autowired
   public EmployeeServiceImpl (EmployeeRepository theEmployeeRepository) {
      employeeRepository = theEmployeeRepository;
   }

   @Override
   public List<Employee> findAll(){
      return employeeRepository.findAll();
   }
}

• Advacned Features
Advanced features available for
 Extending and adding custom queries with JPQL
 Query Domain Specific Language (Query DSL)
 Defining custom methods (low-level coding)


-- Spring Boot REST: Spring Data JPA - Coding - Part 1
-- Spring Boot REST: Spring Data JPA - Coding - Part 2
Example: Using Spring Data JPA to Perform CRUD Operations.
Project:30-spring-boot-rest-crud-employee-with-spring-data-jpa


-- Spring Boot REST: Spring Data REST - Overview
• The Problem
We saw how to create a REST API for Employee: EmployeeRestController, EmployeeService and EmployeeServiceImpl
What if we need to create REST API for another entity? such as: Customer, Student, Product, Book...
Do we have to repeat all of the same code again???

• Spring Data REST - Solution
Spring Data REST is the solution!!!
Leverages your existing JpaRepository
Spring will give you a REST CRUD implementation for FREE .... like MAGIC
It helps to minimize boiler-plate REST code!!!
And no new coding required!!!

• REST API
Spring Data REST will expose these endpoints for free!
HTTP Method 	Endpoint 			CRUD Action
POST 		/api/employees 			Create a new employee
GET 		/api/employees 			Read a list of employees
GET 		/api/employees/{employeeId} 	Read a single employee
PUT 		/api/employees 			Update an existing employee
DELETE 		/api/employees/{employeeId} 	Delete an existing employee

• Spring Data REST - How Does It Work?
Spring Data REST will scan your project for JpaRepository
Expose REST APIs for each entity type for your JpaRepository

• REST Endpoints
By default, Spring Data REST will create endpoints based on entity type
It will provide simple pluralized form:
 First character of Entity type is lowercase
 Then just adds an 's' to the entity
 So for Employee, it will be /employees

• Development Process
1. Add Spring Data REST to your Maven POM file
<dependency>
   <groupId>org.springframework.boot</groupId>
   <artifactId>spring-boot-starter-data-rest</artifactId>
</dependency>

That is it, Absolutely NO CODING required!!
Spring Data REST will scan our project for JpaRepository
Spring Data REST will create endpoints based on entity type 
Spring Data REST will expose these endpoints for free!

• In a Nutshell
For Spring Data REST, you only need 3 items
1. Your entity: Employee
2. JpaRepository: EmployeeRepository extends JpaRepository
3. Maven POM dependency for: spring-boot-starter-data-rest

• Application Architechture
Spring Data REST	<---->		Employee Repository	<---->		Database
/employees                              Spring Data JPA	

• HATEOAS
Spring Data REST endpoints are HATEOAS compliant
HATEOAS: Hypermedia as the Engine of Application State
Hypermedia-driven sites provide information to access REST interfaces
Think of it as meta-data for REST data
For a collection, meta-data includes page size, total elements, pages etc.
HATEOAS uses Hypertext Application Language (HAL) data format

• Advanced Features
Spring Data REST advanced features
 Pagination, sorting and searching
 Extending and adding custom queries with JPQL
 Query Domain Specific Language (Query DSL)


-- Spring Boot REST: Spring Data REST - Coding - Part 1
-- Spring Boot REST: Spring Data REST - Coding - Part 2
Example: Using Spring Data REST to Perform CRUD Operations.
Project:30-spring-boot-rest-crud-employee-with-spring-data-jpa

• Spring Data REST Properties
To change base path: spring.data.rest.base-path=/magic-api


-- Spring Boot REST: Spring Data REST Configs and Sorting - Overview
• The Problem 
Spring Data REST does not handle complex pluralized forms such as: Goose-Geese, Person-People, Syllabus-Syllabi. In this case, you need to specify plural name.
What if we want to expose a different resource name? Instead of /employees ... use /members

• Solution
Specify plural name/path with an annotation:
@RepositoryRestResource(path="members")
public interface EmployeeRepository extends JpaRepository<Employee, Integer> {	
}   
Now it will make use /members in the url: http://localhost:8080/members

• Pagination
By default, Spring Data REST will return the first 20 elements
 Page size = 20
You can navigate to the different pages of data using query param
 http: //localhost: 8080/employees?page=0 (Pages are zero-based)
 http: //localhost: 8080/employees?page=1 
 ...

• Spring Data REST Configuration
File: applicaiton.properties
Name 					Description
spring.data.rest.base-path 		Base path used to expose repository resources
spring.data.rest.default-page-size 	Default size of pages
spring.data.rest.max-page-size 		Maximum size of pages

• Sample Configuration
File: applicaiton.properties
spring.data.rest.base-path=/magic-api   // http://localhost:8080/magic-api/employees
spring.data.rest.default-page-size=50	// it will return 50 elements per page

• Sorting
You can sort by the property names of your entity
 In our Employee example, we have: firstName, lastName and email
 Sort by last name (ascending is default): http://localhost:8080/employees?sort=lastName
 Sort by first name, descending: http://localhost:8080/employees?sort=firstName, desc
 Sort by last name, then first name, ascending: http://localhost:8080/employees?sort=lastName,firstName,asc 


------------------------------------------------------------------------------------------- Section 5 ---------------------------------------------------------------------------------------
-- Spring Boot REST API Security Overview
• We will learn how to
Secure Spring Boot REST APIs
Define users and roles
Protect URLs based on role
Store users, passwords and roles in DB (plain-text -> encrypted)

• Spring Security Model
Spring Security defines a framework for security
Implemented using Servlet filters in the background
Two methods of securing an app: declarative and programmatic

• Spring Security with Servlet Filters
Servlet Filters are used to pre-process / post-process web requests
Servlet Filters can route web requests based on security logic
Spring provides a bulk of security functionality with servlet filters

• Spring Security Overview
We have a web browser on the left, and then on the right, we have this protected web resource
like /mytopsecretstuff. The browser's attempting to access our top-secret information and get the results.
Now, this is where Spring Security comes into play. These Spring Security filters will intercept those requests,
pre-process them, and then see if the user can actually access that protected resource.
Spring Security will look at our application security configuration.
And then, it'll also look at the user's passwords and roles that are in our database
to see if this user's authenticated and also if they're authorized to access this web resource.
And this all happens in the background, thanks to Spring Security.

Web browser <----> Spring Security Filters <----> Protected Web Resource(/mytopsecretstuff)
                            |----> checks our app security configuration <----> check users passwords roles 

• Spring Security in action (pseudo code)
Step 1: Spring Security Filters
Step 2: Is Web Resource Protected?
        a. Yes: Go to Step 3
        b. No : Go to Step 9 
Step 3: Is user Authenticated?
        a. Yes: Go to Step 7 
        b. No : Go to Step 4
Step 4: Send to Login Form
Step 5: Show Login Form
Step 6: Authenticate user id & password than go to step 3
step 7: Is user Authorized?
        a. Yes: Go to Step 9
        b. No : Go to step 8 
Step 8: Access Denied
Step 9: Show Resource 

• Spring Security Concepts
Authentication: Check user id and password with credentials stored in app / db 
Authorization : Checks to see if the user has an authorized role.

• Declarative Security 
Define application’s security constraints in configuration. All Java config: @Configuration
Provides separation of concerns between application code and security
 
• Programmatic Security
Spring Security provides an API for custom application coding
Provides greater customization for specific app requirements

• Enabling Spring Security
1. Edit pom.xml by adding spring-boot-starter-security
<dependency>
  <groupId>org.springframework.boot</groupId>
  <artifactId>spring-boot-starter-security</artifactId>
</dependency>

2. This will automagically secure all endpoints for application
  
• Secured Endpoints
When we access our application, Spring Security will prompt for login
Default username: user
Default password: check console logs for autogenerated password 

• Spring Security Configuration
We can always override default username and generated password
File: application.properties
spring.security.user.name=aumsoni
spring.security.user.password=aum123

• Authentication and Authorization
There are different techniques for defining users, passwords, and roles.
We can make use of in-memory authentication. We can also use JDBC to define users,
passwords, and roles in a database. There's support for LDAP.
We can also use our own custom plugin, our own authentication, and authorization coding,
and there's plenty of others out there.
In-memory, JDBC ,LDAP ,Custom / Pluggable, others

In this section, we'll actually cover the in-memory authentication.
And then, we'll also cover password storage in the database using JDBC.
We will see how to store our passwords using plain text, and we'll also 
look at how to encrypt the passwords in the database.


-- Spring Boot REST API Security - Coding - Part 1
-- Spring Boot REST API Security - Coding - Part 2
Example: Injecting spring-boot-rest-security dependency in pom.xml and setting user & password in application.properties
Project: 01-spring-boot-rest-security-default-security


-- Spring Boot REST API Security - Basic Configuration - Overview
• Our Users
User Id		Password	Roles
john 		test123 	EMPLOYEE
mary 		test123 	EMPLOYEE, MANAGER
susan 		test123 	EMPLOYEE, MANAGER, ADMIN

• Spring Security Password Storage
In Spring Security, passwords are stored using a specific format as shown below
{id}encodedpassword: In the curly braces, we give the actual id and then we have the encoded password.

The idea here is that we have the encoding algorithm that's being used for this password.
In this example, we have noop, means no operation. That's just for plain text passwords, meaning no encryption,
no hashing, no nothing, just plain text and then we have bcrypt and that's for BCrypt password hashing.
Basically, that's one-way hashing or one-way encryption. We take the password and we hash it using a given 
BCrypt algorithm and it's stored in that fashion.
ID		Description
noop		Plain text passwords
bcrypt 		BCrypt password hashing 

• Password Example
1. {noop}test123: no operation example
{noop}  = The encoding algorithm id. Here we are writting 'noop' to let Spring Security know that we are using 'noop' that is the passwords are stored as plain text.
test123 = This is just our password.

• Development Process
1. Create Spring Security Configuration (@Configuration)
File: DemoSecurityConfig.java
import org.springframework.context.annotation.Configuration;
@configuration
public class DemoSecurityConfig {
  // add our security configurations here ...
}

2. Add users, passwords and roles
File: DemoSecurityConfig.java
import org.springframework.context.annotation.Configuration;
@configuration
public class DemoSecurityConfig {
    @Bean
    public InMemoryUserDetailsManager userDetailsManager() {
        UserDetails john = User.builder()
                .username("john")
		.password("{noop}test123")
		.roles("EMPLOYEE")
		.build();

	UserDetails mary = User.builder()
		.username("mary")
		.password("{noop}test123")
		.roles("EMPLOYEE" "MANAGER")
		.build();

	UserDetails susan = User.builder()
		.username("susan")
		.password("{noop}test123")
		.roles("EMPLOYEE", "MANAGER", "ADMIN")
		.build();

	return new InMemoryUserDetailsManager (john, mary, susan);
     }
}	


-- Spring Boot REST API Security - Basic Configuration - Coding
Example: How to create Spring Security Configuration (@Configuration) and add users, passwords and roles in it.
Project: 00-spring-boot-rest-security-employee-starter-code
Postman: Authorization -> type: Basic Auth -> Username & Password


-- Spring Boot REST API Security - Restrict URLs based on Roles - Overview 
• Restrict URLs based on Roles Example
HTTP Method 	Endpoint 			CRUD Action 	Role
GET 		/api/employees 			Read all 	EMPLOYEE
GET 		/api/employees/{employee Id} 	Read single 	EMPLOYEE
POST 		/api/employees 			Create 		MANAGER
PUT 		/api/employees 			Update 		MANAGER
DELETE 		/api/employees/{employeId} 	Delete 		ADMIN

• Restricting Access to Roles
In the below syntax: 
We have to add 2 things inside requestMatchers
1. HTTP Method = We have to add a HTTP Method such as 'GET', 'POST', 'PUT' or any other HTTP Method.
2. Path        = We have add a path such as '/api/employees' to provide access

Than we have to add 1 thing inside hasRole
1. Authorized Role =  We have to add a role such as 'ADMIN' to whom the access should be provided. And There must be only 1 role defined here

General Syntax: For 1 HTTP Method, 1 Path and 1 Authorized role
requestMatchers(<<add HTTP Method to match on>>, << add path to match on >>)	
       .hasRole(<< authorized role, must be only 1 >>)	        				

General Syntax: For 1 HTTP Method, 1 Path and 1 or more Authorized role
requestMatchers(<<add HTTP Method to match on>>, << add path to match on >>)	
       .hasAnyRole(<< authorized role, can be 1 or more than 1 with comma-delimited >>)

• Authorize Requests for EMPLOYEE Role
requestMatchers(HttpMethod.GET, "/api/employees").hasRole("EMPLOYEE")	 // Giving access to all 'Employees' for CRUD Action: Read all 
requestMatchers(HttpMethod.GET, "/api/employees/**").hasRole("EMPLOYEE") // Giving access to all 'Employees' for CRUD Action: Read single [the ** matches on all sub-paths]

• Authorize Requests for MANAGER Role
requestMatchers(HttpMethod.POST, "/api/employees").hasRole("MANAGER")	 // Giving access to all 'Managers' for CRUD Action: Create a single Employee 
requestMatchers(HttpMethod.PUT, "/api/employees").hasRole("MANAGER")	 // Giving access to all 'Managers' for CRUD Action: Update a single Employee 

• Authorize Requests for ADMIN Role
requestMatchers(HttpMethod.DELETE, "/api/employees/**").hasRole("ADMIN") // Giving access to all 'Admins' for CRUD Action: Delete single [the ** matches on all sub-paths]

• Pull It Together
@Bean
public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
    http.authorizeHttpRequests(configurer ->
                configurer
                        .requestMatchers(HttpMethod.GET, "/api/employees").hasRole("EMPLOYEE")
                        .requestMatchers(HttpMethod.GET, "/api/employees/**").hasRole("EMPLOYEE")
                        .requestMatchers(HttpMethod.POST, "/api/employees").hasRole("MANAGER")
                        .requestMatchers(HttpMethod.PUT, "/api/employees").hasRole("MANAGER")
                        .requestMatchers(HttpMethod.DELETE, "/api/employees/**").hasRole("ADMIN"));
    // use HTTP Basic authentication
    http.httpBasic();

    // disable Cross Site Request Forgery
    http.csrf().disable();   
 
    return http.build();
}

• Cross-Site Request Forgery (CSRF)
Spring Security can protect against CSRF attacks
Embed additional authentication data/token into all HTML forms
On subsequent requests, web app will verify token before processing
Primary use case is traditional web applications (HTML forms etc ...)

• When to use CSRF Protection
The Spring Security team recommends:
 Use CSRF protection for any normal browser web requests
 Traditional web apps with HTML forms to add/modify data
If you are building a REST API for non-browser clients, you may want to disable CSRF protection
In general, not required for stateless REST APIs, That use POST, PUT, DELETE and/or PATCH


-- Spring Boot REST API Security - Restrict URLs based on Roles - Coding - Part 1
-- Spring Boot REST API Security - Restrict URLs based on Roles - Coding - Part 2
-- Spring Boot REST API Security - Restrict URLs based on Roles - Coding - Part 3
Example: How to provide access to URLs based on user roles and testing them through Postman.
Project: 03-spring-boot-rest-security-restrict-access-based-on-roles


-- Spring Boot REST API Security - JDBC Authentication - Plain Text - Overview
• Database Access
So far, our user accounts were hard coded in Java source code
In this section, We will add user accounts into the database and will access those user accounts from it.
It is an Advanced feature of Spring Security.

• Database Support in Spring Security
Spring Security can read user account info from database. By default, we have to follow Spring Security’s predefined table schemas
But the nice thing about it is that by following their schemas, and then Spring Security includes all of the JDBC code
to actually read information from the database. There's very little Java code we have to write as far as JDBC code
for reading information from the database. All we have to do is simply set up the configuration, create the appropriate tables,
and Spring Security will do all the heavy lifting for us in the background.
Spring Security <----> JDBC Code <----> Database

• Customize Database Access with Spring Security
Now we also have the option of customizing the table schemas. This is very useful if we have custom tables specific to your given project.
The only thing that we will be responsible for is developing the code to access the data. 
In this scenario, we will have to write the low-level JDBC code or Hibernate code to read the data from the appropriate tables.
We will have to read the account information and also read the user roles.

• Default Spring Security Database Schema
Spring Security has a default database schema, so we need to provide two tables,
one called 'users' and another one called 'authorities'. And we have to use these exact table names.
And also the tables need to have these specific columns, username, password, and enabled for the 'users' table.
And then also username and authority for the 'authorities' table. We need to have the exact same table names
and columns as shown here. 
Tables:
users       : username, password, enabled
authorities : username, authority

• Development Process
1. Develop SQL Script to set up database tables
CREATE TABLE `users` (
  `username` varchar(50) NOT NULL,
  `password` varchar(50) NOT NULL,
  `enabled` tinyint NOT NULL,
  
  PRIMARY KEY (`username`)

) ENGINE=InnoDB DEFAULT CHARSET=latin1;

INSERT INTO `users`
VALUES
('john','{noop}test123',1),
('mary','{noop}test123',1),
('susan','{noop}test123',1) ;

CREATE TABLE `authorities` (
  `username` varchar (50) NOT NULL,
  `authority` varchar (50) NOT NULL,

  UNIQUE KEY `authorities_idx_1` (`username`,`authority`),

  CONSTRAINT `authorities ibfk l`
  FOREIGN KEY (`username`)
  REFERENCES `users` (`username`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

INSERT INTO `authorities`
VALUES
('john','ROLE_EMPLOYEE'),
('mary','ROLE_EMPLOYEE'),
('mary','ROLE_MANAGER'),
('susan','ROLE_EMPLOYEE'),
('susan','ROLE_MANAGER'),
('susan','ROLE_ADMIN');

2. Add database support to Maven POM file
<!-- MySQL -->
<dependency>
 <groupId>com.mysql</groupId>
 <artifactId>mysql-connector-j</artifactId>
 <scope>runtime</scope>
</dependency>

3.Create JDBC properties file
File: applicaiton.properties
# JDBC connection properties
spring.datasource.url=jdbc:mysql://localhost:3306/employee_directory
spring.datasource.username=springstudent
spring.datasource.password=springstudent

4. Update Spring Security Configuration to use JOBC
@Configuration
public class DemoSecurityConfig {
    @Bean
    public UserDetailsManager userDetailsManager(DataSource dataSource) { // here we are injecting DataSource, so that JDBC Authentication can make use of it. 
        return new JdbcUserDetailsManager (dataSource) ;  // here we are telling spring to make use of JDBC Authentication with our datasource.
    }
}


-- Spring Boot REST API Security - JDBC Authentication - Plain Text - Coding Part 1
-- Spring Boot REST API Security - JDBC Authentication - Plain Text - Coding Part 2
-- Spring Boot REST API Security - JDBC Authentication - Plain Text - Coding Part 3
Example: Exceuting SQL Queries to create Database tables for putting user's information and writting code for accessing those user information from those database
Project: 04-spring-boot-rest-security-jdbc-plain-text


-- Spring Boot REST API Security - BCrypt Encryption - Overview - Part 1
• Password Storage - Best Practice
The best practice is to store passwords in an encrypted format
username 	password  								enabled
john 		{bcrypt}$2a$10$qeSOHEh7urweMojsnwNAR.vcXJeXR1 UcMRZ2WcGQI9YeuspUdgF.q 	1
mary 		{bcrypt}$2a$10$qeSOHEh7urweMojsnwNAR.vcXJeXR1 UcMRZ2WcGQI9YeuspUdgF.q 	1
susan 		{bcrypt}$2a$10$qeSOHEh7urweMojsnwNAR.vcXJeXR1 UcMRZ2WcGQI9YeuspUdgF.q 	1

• Spring Security Team Recommendation
Spring Security recommends using the popular bcrypt algorithm
bcrypt
 Performs one-way encrypted hashing
 Adds a random salt to the password for additional protection
 Includes support to defeat brute force attacks

• How to Get a Bcrypt password
We have a plaintext password and you want to encrypt using bcrypt
 Option 1: Use a website utility to perform the encryption
           Visit: www. luv2code.com/generate-bcrypt-password
           Enter your plaintext password
           The website will generate a bcrypt password for you
 Option 2: Write Java code to perform the encryption


-- Spring Boot REST API Security - BCrypt Encryption - Overview - Part 2           
• Spring Security Password Storage Rules
The password column must be at least 68 chars wide
{bcrypt} - 8 chars
encodedPasswords - 60 chars
Modify DDL for password field, length should be 68 - `password` char(68) NOT NULL

• Development Process
1. Run SQL Script that contains encrypted passwords
INSERT INTO `users` 
VALUES 
('john','{bcrypt}$2a$10$qeS0HEh7urweMojsnwNAR.vcXJeXR1UcMRZ2WcGQl9YeuspUdgF.q',1),
('mary','{bcrypt}$2a$10$qeS0HEh7urweMojsnwNAR.vcXJeXR1UcMRZ2WcGQl9YeuspUdgF.q',1),
('susan','{bcrypt}$2a$10$qeS0HEh7urweMojsnwNAR.vcXJeXR1UcMRZ2WcGQl9YeuspUdgF.q',1);   

• Spring Security Login Process
REST Client <-- User enters plain text password --> Spring Security Filters <----> Database(containing user information)
How Spring Security Filter will work:
1. Retrieve password from db for the user
2. Read the encoding algorithm id (bcrypt etc)
3. For case of bcrypt, encrypt plaintext password from login form (using salt from db password)
4. Compare encrypted password from login form WITH encrypted password from db (the password from db is never decrypted, because bcrypt is a one-way encryption algorithm)
5. If there is a match, login successful
6. If no match, login NOT successful


-- Spring Boot REST API Security - BCrypt Encryption - Coding
Example: Exceuting SQL Queries to create Database tables for putting user's information and writting code for accessing those user information from those database
Project: 05-spring-boot-rest-security-jdbc-bcrypt


-- Spring Boot REST API Security - JDBC Authentication - Custom Tables - Overview
• Making use of Custom Tables to store user information
Till now we made use of default Spring Security Database Schema.
We can also make use of Custom tables as per our need.
But to do that that is to do Security Schema Customization we must have to provide below following things:
Tell Spring how to query your custom tables
Provide query to find user by user name
Provide query to find authorities / roles by user name


• Development Process
1. Create our custom tables with SQL
Custom tables:
members	     : user_id, pw, active	 
roles        : user_id, role

2. Update Spring Security Configuration
   Provide query to find user by user name
   Provide query to find authorities / roles by user name
@Configuration
public class DemoSecurityConfig {
    @Bean
    public UserDetailsManager userDetailsManager(DataSource dataSource) { 
        JdbcUserDetailsManager theUserDetailManager = new JdbcUserDetailsManager(dataSource);
 
         theUserDetailManager
            .setUsersByUsernameQuery("select user_id, pw, active from members where user_id=?");
 
         theUserDetailManager
            .setAuthoritiesByUsernameQuery("select user_id, role from roles where user_id=?");
         
        return new JdbcUserDetailsManager(dataSource);  
    }
}


-- Spring Boot REST API Security -Custom Tables - Coding - Part 1
-- Spring Boot REST API Security -Custom Tables - Coding - Part 2
-- Spring Boot REST API Security -Custom Tables - Coding - Part 3
Example: Executing Queries to create Custom Tables, Updating Spring Security Configuration and testing through Postman
Project: 06-spring-boot-rest-security-jdbc-bcrypt-custom-table-names


------------------------------------------------------------------------------------------- Section 6 ---------------------------------------------------------------------------------------
-- Spring Boot - Spring MVC with Thymeleaf - Overview
• What is Thymeleaf? (www.thymeleaf.org)
Thymeleaf is a Java templating engine
Commonly used to generate the HTML views for web apps
However, it is a general purpose templating engine
we can use Thymeleaf outside of web apps
It is a separate project unrelated to spring.io
We can create Java Apps with Thymeleaf, There is no need for spring to do that.
But there is a lot of synergy between the two projects.

• What is a Thymeleaf template?
It can be an HTML page with some Thymeleaf expressions
It includes dynamic content from Thymeleaf expressions

• Where is the Thymeleaf template processed?
In a web app, Thymeleaf is processed on the server.
Results included in HTML returned to browser.
The web browser sends a request over to Spring MVC controller. The controller adds some data to the model,
sends it over to the template, and then the template sends back HTML to the web browser.
Web Browser ---1---> Spring MVC Controller ---2 [Model]---> Thymeleaf Template ---3---> Web Browser

• Where to place Thymeleaf templat?
In Spring Boot, your Thymeleaf template files go in: src/main/resources/templates
For web apps, Thymeleaf templates have a .html extension

• Additional Features 
Looping and conditionals
CSS and JavaScript integration
Template layouts and fragments

• Development Process
1. Add Thymeleaf to Maven POM file
<dependency>
  <groupId>org.springframework.boot</groupId>
  <artifactId>spring-boot-starter-thymeleaf</artifactId>
</dependency>

2. Develop Spring MVC Controller
File: DemoController.java
@Controller
public class DemoController {
  @GetMapping("/")
  public String sayHello(Model theModel){
    theModel.addAttribute("theDate", new java.util.Date());	// this attribute 'theDate' will be accessed by Thymeleaf HTML Template from this Spring MVC Model
    return "helloworld"; // As we inject Thymeleaf dependency in Maven POM, Spring will auto-configure to use Thymeleaf and look for 'helloworld.html' file in src/main/resources/templates/
  }
}

3. Create Thymeleaf template
<!DOCTYPE HTML>
<html xmlns:th="http://www.thymeleaf.org">	<!-- To use Thymeleaf expressions -->
<head> ... </head>

<body>
    <p th:text="'Time on the server is ' + ${theDate}" />	<!-- This is our Thymeleaf Expressions 'th:text...' -->
</body>

</html>


-- Spring Boot - Spring MVC with Thymeleaf - Coding - Part 1
-- Spring Boot - Spring MVC with Thymeleaf - Coding - Part 2
Example: Creating our first Web application with using Spring MVC Model and Thymeleaf
Project: 01-thymeleafdemo-helloworld


-- Spring Boot - Spring MVC with Thymeleaf and CSS - Overview
• Using CSS with Thymeleaf Templates
You have the option of using
 Local CSS files as part of your project
 Referencing remote CSS files

• Other Search Directories
Spring Boot will search following directories for static resources under: /src/main/resources
/META-INF/resources
/resources
/static
/public

• 3rd Party CSS Libraries - Bootstrap
Option 1: Local Installation
          Download Bootstrap file(s) and add like shown: src/main/resources/static/css/bootstrap.min.css
          So we can reference it in our template as shown: <link rel="stylesheet" th:href="@{/css/bootstrap.min.css}">
Option 2: Remote Files
          We can access the Bootstrap files remotely on the internet.
          So we can reference it in our template with 'href' tag as shown: <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css">

• Development Process
1. Create CSS file
Spring Boot will look for all static resources in the: src/main/resources/static folder.
We will create a file named 'demo.css' inside a sub-directory 'css' in the src/main/resources/static folder.
We can create as many sub-directories as we want with any custom name inside 'static' folder. But it always should be inside 'static' folder.
File: src/main/resources/static/css/demo.css
.funny{
  font-style: italic;
  color: green;
}

2. Reference CSS in Thymeleaf template
<head>
    <title>Thymeleaf Demo</title>
    <link rel="stylesheet" th:href="@{/css/demo.css}">	<!-- This is how we reference css in Thymeleaf template -->
</head>

3. Apply CSS style
<body>
<p th:text="'Time on the server is ' + ${theDate}" class="funny"/>    <!-- This is how we apply css class to our HTML tags -->
</body>


-- Spring Boot - Spring MVC with Thymeleaf and CSS - Coding
Example: Adding CSS to our created ThymeleafDemoApplication
Project: 02-thymeleafdemo-helloworld-css
 

------------------------------------------------------------------------------------------- Section 7 ---------------------------------------------------------------------------------------
-- Spring Boot - Thymeleaf - CRUD Database Project - Overview
• Application Requirements
Create a Web UI for the Employee Directory
Users should be able to
 Get a list of employees
 Add a new employee
 Update an employee
 Delete an employee

• Big Picture
Web Browser --> Employee Controller <--> Employee Service <--> Employee Repository <--> Database
     |                  |
     |      <-- Thymeleaf Templates        

• Application Architecture
Employee Controller <--> Employee Service <--> Employee Repository <--> Database

• Development Process - Big Picture
1. Get list of employees
2. Add a new employee
3. Update an existing employee
4. Delete an existing employee


-- Spring Boot - Thymeleaf - CRUD Database Project - Set up
Setting up Project: 07-spring-boot-spring-mvc-crud


-- Spring Boot - Thymeleaf - CRUD Database Project - Get Employees - Coding
Example: Getting Employee List from the MySQl Database and showing it on screen through Thymeleaf Template
Project: 00-thymeleaf-demo-employees-list


-- Spring Boot - Thymeleaf - CRUD Database Project - Add Employees - Overview
• Thymeleaf and Spring MVC Data Binding
Thymeleaf has special expressions for binding Spring MVC form data
Automatically setting / retrieving data from a Java object

• Thymeleaf Expressions
Thymeleaf expressions can help you build the HTML form :-)

Expression	Description
th:action 	Location to send form data
th:object 	Reference to model attribute
th: field	Bind input field to a property on model attribute
More...

• Development Process
1. New Add Employee button for list-employees.html
File: list-employees.html
<a th:href="@{/employees/showFormForAdd}"
 class="btn btn-primary btn-sm mb-3">
 Add Employee
</a>

File: EmployeeController.java
@Controller
@RequestMapping("/employees")
public class EmployeeController {
  @GetMapping("/showFormForAdd")
  public String showFormForAdd (Model theModel) {
    // create model attribute to bind form data (before we show the form, we must have to add a model attribute which is an object that will hold the form data for the data-binding)
    Employee theEmployee = new Employee();	         
    theModel.addAttribute("employee", theEmployee);
    return "employees/employee-form"; 			// here it will look for src/main/resources/templates/employees/employee-form.html
  }
}

2. Create HTML form for new employee
File: employee-form.html
<form action="#" th:action="@{/employees/save}" th:object="${employee}" method="POST"> <!-- the 'employee' in the th:object is the same model that is mentioned in EmployeeController.java -->

  <!--the 'firstName' in th:field is wired/referenced with the 'employee' of th:object-->
  <input type="text" th:field="*{firstName}" placeholder="First Name" class="form-control mb-4 w-25"> 
  <input type="text" th:field="*{lastName}" placeholder="Last Name" class="form-control mb-4 w-25">   
  <input type="text" th:field="*{email}" placeholder="Email" class="form-control mb-4 w-25">
  <button type="submit" class="btn btn-info col-2">Submit</button>  

</form>

<!--	 
When the form is first loaded, it will call the getter method such as employee.getFirstName(), employee.getLastName()... to populate the form fields initially.
When the form is submitted, it will call the setter method such as employee.setFirstName(), employee.setLastName()... to populate Java Object with form data. 
-->

3. Process form data to save employee
File: EmployeeController.java
@Controller
@RequestMapping("/employees")
public class EmployeeController {
  private EmployeeService employeeService;
  public EmployeeController(EmployeeService theEmployeeService) { // Constructor Injection
      employeeService = theEmployeeService;
  }
  @PostMapping("/save")
  public String saveEmployee(@ModelAttribute("employee") Employee theEmployee) {
  // Save the Employee
  employeeService.save(theEmployee);

  // use a redirect to prevent duplicate submissions
  return "redirect:/employees/list";
  }
}


-- Spring Boot - Thymeleaf - CRUD Database Project - Add Employee - Coding - Part 1
-- Spring Boot - Thymeleaf - CRUD Database Project - Add Employee - Coding - Part 2
-- Spring Boot - Thymeleaf - CRUD Database Project - Add Employee - Coding - Part 3
Example: Adding a new Employee through an 'Add Employee' button, an 'Employee Form' and a 'Save' button 
Project: 02-thymeleaf-demo-employees-add


-- Spring Boot - Thymeleaf - CRUD Database Project - Update Employee - Overview
• Development Process
1. "Update" button
File: list-employee.html
<tr th:each="tempEmployee : ${employees}"> <!-- Saving each employee into the 'tempEmployee' to show their information at new iteration -->
    ...
    <td>
      <a th:href="@{/employees/showFormForUpdate(employeeId=${tempEmployee.id})}" 
         class="btn btn-info btn-sm"> <!-- the URL will be: "http://localhost:8080/employees/showFormForUpdate?employeeId=1" -->
        Update
      </a>
    </td>
</tr> 

2. Pre-populate the form
@Controller
@RequestMapping("/employees")
public class EmployeeController {
    private EmployeeService employeeService;

    public EmployeeController(EmployeeService theEmployeeService) { // Constructor Injection
        employeeService = theEmployeeService;
    }

    @GetMapping("/showFormForUpdate")
    public String showFormForUpdate(@RequestParam("employeeId") int theId, Model theModel) { // here we access to /ShowFormForUpdate's parameters with which we can know the id.
        // Get the Employee with id 'theId' from the service
        Employee theEmployee = employeeService.findById(theId);

        // Set 'theEmployee' as a Model Attribute to pre-populate the form
        theModel.addAttribute("employee", theEmployee);

        // send over to the form
        return "employees/employee-form";
    }
}

File: employee-form.html
<form action="#" th:action="@{/employees/save}" th:object="${employee}" method="POST">
    <!-- Hidden form field is required for updates as this binds to the model attribute that tells your app which employee to update -->
    <input type="hidden" th:field="*{id}" />
</form>

3. Process form data
Once we are on the 'employee-form' HTML page, The code to save an employee has already written by us.
No need to write anything for this step.
   

-- Spring Boot - Thymeleaf - CRUD Database Project - Update Employee - Coding
Example: updating an existing Employee through an 'Update' button, an 'Pre-Populated Employee Form' and a 'Save' button 
Project: 03-thymeleaf-demo-employees-update


-- Spring Boot - Thymeleaf - CRUD Database Project - Delete Employee - Overview
• Development Process
1. Add “Delete” button/link on page
File: list-employees.html
<tr th:each="tempEmployee : ${employees}">
    ...

    <td>
        <a th:href="@{/employees/delete(employeeId=${tempEmployee.id})}"
           class="btn btn-danger btn-sm"
           onclick="if (!(confirm('Are you sure you want to delete this Employee?'))) return false">
            Delete
        </a>
    </td>

</tr>

2. Add controller code for “Delete”
File: EmployeeController.java
@Controller
@RequestMapping("/employees")
public class EmployeeController {
    ...  
 
    // add mapping for "/delete"
    @GetMapping("/delete")
    public String delete(@RequestParam("employeeId") int theId) {
        // delete the employee
        employeeService.deleteById(theId);

        // use a redirect to prevent duplicate submissions
        return "redirect:/employees/list";
    }
}


------------------------------------------------------------------------------------------- Section 8 ---------------------------------------------------------------------------------------


































